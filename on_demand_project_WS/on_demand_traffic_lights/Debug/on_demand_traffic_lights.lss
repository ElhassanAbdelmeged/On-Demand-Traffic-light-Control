
on_demand_traffic_lights.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00001e7a  00001f0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  0080006e  0080006e  00001f1c  2**0
                  ALLOC
  3 .stab         00002100  00000000  00000000  00001f1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001549  00000000  00000000  0000401c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005565  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000056a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005815  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000745e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008349  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000090f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009258  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000094e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009cb3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 2e 09 	jmp	0x125c	; 0x125c <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 d4 0c 	jmp	0x19a8	; 0x19a8 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 07 0d 	jmp	0x1a0e	; 0x1a0e <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e7       	ldi	r30, 0x7A	; 122
      68:	fe e1       	ldi	r31, 0x1E	; 30
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 37       	cpi	r26, 0x76	; 118
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 23 09 	call	0x1246	; 0x1246 <main>
      8a:	0c 94 3b 0f 	jmp	0x1e76	; 0x1e76 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 04 0f 	jmp	0x1e08	; 0x1e08 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 20 0f 	jmp	0x1e40	; 0x1e40 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 10 0f 	jmp	0x1e20	; 0x1e20 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2c 0f 	jmp	0x1e58	; 0x1e58 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 10 0f 	jmp	0x1e20	; 0x1e20 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2c 0f 	jmp	0x1e58	; 0x1e58 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 04 0f 	jmp	0x1e08	; 0x1e08 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 20 0f 	jmp	0x1e40	; 0x1e40 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 10 0f 	jmp	0x1e20	; 0x1e20 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 2c 0f 	jmp	0x1e58	; 0x1e58 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 10 0f 	jmp	0x1e20	; 0x1e20 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 2c 0f 	jmp	0x1e58	; 0x1e58 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 10 0f 	jmp	0x1e20	; 0x1e20 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 2c 0f 	jmp	0x1e58	; 0x1e58 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 14 0f 	jmp	0x1e28	; 0x1e28 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 30 0f 	jmp	0x1e60	; 0x1e60 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <app_start>:
uint8 i=0;
uint8 g_flag=0;
uint8 g_Timer_ticks=0;

void app_start(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	69 97       	sbiw	r28, 0x19	; 25
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61


	Timer1_ConfigType TIMER_Configs={0,1000,F_CPU_1024,CTC_MODE};
     b5a:	ce 01       	movw	r24, r28
     b5c:	0f 96       	adiw	r24, 0x0f	; 15
     b5e:	9e 8b       	std	Y+22, r25	; 0x16
     b60:	8d 8b       	std	Y+21, r24	; 0x15
     b62:	e8 e6       	ldi	r30, 0x68	; 104
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	f8 8f       	std	Y+24, r31	; 0x18
     b68:	ef 8b       	std	Y+23, r30	; 0x17
     b6a:	f6 e0       	ldi	r31, 0x06	; 6
     b6c:	f9 8f       	std	Y+25, r31	; 0x19
     b6e:	ef 89       	ldd	r30, Y+23	; 0x17
     b70:	f8 8d       	ldd	r31, Y+24	; 0x18
     b72:	00 80       	ld	r0, Z
     b74:	8f 89       	ldd	r24, Y+23	; 0x17
     b76:	98 8d       	ldd	r25, Y+24	; 0x18
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	98 8f       	std	Y+24, r25	; 0x18
     b7c:	8f 8b       	std	Y+23, r24	; 0x17
     b7e:	ed 89       	ldd	r30, Y+21	; 0x15
     b80:	fe 89       	ldd	r31, Y+22	; 0x16
     b82:	00 82       	st	Z, r0
     b84:	8d 89       	ldd	r24, Y+21	; 0x15
     b86:	9e 89       	ldd	r25, Y+22	; 0x16
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	9e 8b       	std	Y+22, r25	; 0x16
     b8c:	8d 8b       	std	Y+21, r24	; 0x15
     b8e:	99 8d       	ldd	r25, Y+25	; 0x19
     b90:	91 50       	subi	r25, 0x01	; 1
     b92:	99 8f       	std	Y+25, r25	; 0x19
     b94:	e9 8d       	ldd	r30, Y+25	; 0x19
     b96:	ee 23       	and	r30, r30
     b98:	51 f7       	brne	.-44     	; 0xb6e <app_start+0x28>
	Timer1_init(&TIMER_Configs);
     b9a:	ce 01       	movw	r24, r28
     b9c:	0f 96       	adiw	r24, 0x0f	; 15
     b9e:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <Timer1_init>


	/*pedestrian*/
	LED_init(PORTB_ID , PIN0_ID); //red
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	60 e0       	ldi	r22, 0x00	; 0
     ba6:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <LED_init>
	LED_init(PORTB_ID , PIN1_ID) ;//yellow
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	61 e0       	ldi	r22, 0x01	; 1
     bae:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <LED_init>
	LED_init(PORTB_ID , PIN2_ID); //green
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	62 e0       	ldi	r22, 0x02	; 2
     bb6:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <LED_init>
	/*CARS*/
	LED_init(PORTA_ID , PIN0_ID) ;//red
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	60 e0       	ldi	r22, 0x00	; 0
     bbe:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <LED_init>
	LED_init(PORTA_ID , PIN1_ID) ;//yellow
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	61 e0       	ldi	r22, 0x01	; 1
     bc6:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <LED_init>
	LED_init(PORTA_ID , PIN2_ID) ;//green
     bca:	80 e0       	ldi	r24, 0x00	; 0
     bcc:	62 e0       	ldi	r22, 0x02	; 2
     bce:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <LED_init>

	BUTTON_init(PORTD_ID , PIN2_ID);
     bd2:	83 e0       	ldi	r24, 0x03	; 3
     bd4:	62 e0       	ldi	r22, 0x02	; 2
     bd6:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <BUTTON_init>

	sei();
     bda:	78 94       	sei
	INT0_init();
     bdc:	0e 94 61 09 	call	0x12c2	; 0x12c2 <INT0_init>


	while(1)
	{

		INT0_setCallBack(INT0_ISR_calledback);
     be0:	88 ec       	ldi	r24, 0xC8	; 200
     be2:	96 e0       	ldi	r25, 0x06	; 6
     be4:	0e 94 84 09 	call	0x1308	; 0x1308 <INT0_setCallBack>


/*___________________cars green_____________________________________*/
		g_theWorkingLed=green;
     be8:	82 e0       	ldi	r24, 0x02	; 2
     bea:	80 93 6e 00 	sts	0x006E, r24
		g_Timer_ticks=0;
     bee:	10 92 71 00 	sts	0x0071, r1
		LED_on(PORTB_ID, PIN0_ID);//pedestrian red
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	60 e0       	ldi	r22, 0x00	; 0
     bf6:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <LED_on>
		LED_on (PORTA_ID , PIN2_ID) ; //car green
     bfa:	80 e0       	ldi	r24, 0x00	; 0
     bfc:	62 e0       	ldi	r22, 0x02	; 2
     bfe:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <LED_on>
		Timer1_setCallBack(TIMER_ISR_COUNTER);
     c02:	87 e1       	ldi	r24, 0x17	; 23
     c04:	99 e0       	ldi	r25, 0x09	; 9
     c06:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <Timer1_setCallBack>
		while(g_Timer_ticks!=5);
     c0a:	80 91 71 00 	lds	r24, 0x0071
     c0e:	85 30       	cpi	r24, 0x05	; 5
     c10:	e1 f7       	brne	.-8      	; 0xc0a <app_start+0xc4>
		LED_off(PORTB_ID, PIN0_ID);
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	60 e0       	ldi	r22, 0x00	; 0
     c16:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <LED_off>
		LED_off (PORTA_ID , PIN2_ID) ;
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	62 e0       	ldi	r22, 0x02	; 2
     c1e:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <LED_off>

/*________________yellows________________________________________*/
		g_theWorkingLed=yellow;
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	80 93 6e 00 	sts	0x006E, r24
		for(i=0;i<10;i++)
     c28:	10 92 6f 00 	sts	0x006F, r1
     c2c:	87 c0       	rjmp	.+270    	; 0xd3c <app_start+0x1f6>
		{
			TOGGLE_BIT(PORTB,PIN1_ID);
     c2e:	a8 e3       	ldi	r26, 0x38	; 56
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	e8 e3       	ldi	r30, 0x38	; 56
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	90 81       	ld	r25, Z
     c38:	82 e0       	ldi	r24, 0x02	; 2
     c3a:	89 27       	eor	r24, r25
     c3c:	8c 93       	st	X, r24
			TOGGLE_BIT(PORTA,PIN1_ID);
     c3e:	ab e3       	ldi	r26, 0x3B	; 59
     c40:	b0 e0       	ldi	r27, 0x00	; 0
     c42:	eb e3       	ldi	r30, 0x3B	; 59
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	90 81       	ld	r25, Z
     c48:	82 e0       	ldi	r24, 0x02	; 2
     c4a:	89 27       	eor	r24, r25
     c4c:	8c 93       	st	X, r24
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	aa ef       	ldi	r26, 0xFA	; 250
     c54:	b3 e4       	ldi	r27, 0x43	; 67
     c56:	8b 87       	std	Y+11, r24	; 0x0b
     c58:	9c 87       	std	Y+12, r25	; 0x0c
     c5a:	ad 87       	std	Y+13, r26	; 0x0d
     c5c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c5e:	6b 85       	ldd	r22, Y+11	; 0x0b
     c60:	7c 85       	ldd	r23, Y+12	; 0x0c
     c62:	8d 85       	ldd	r24, Y+13	; 0x0d
     c64:	9e 85       	ldd	r25, Y+14	; 0x0e
     c66:	20 e0       	ldi	r18, 0x00	; 0
     c68:	30 e0       	ldi	r19, 0x00	; 0
     c6a:	4a e7       	ldi	r20, 0x7A	; 122
     c6c:	53 e4       	ldi	r21, 0x43	; 67
     c6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c72:	dc 01       	movw	r26, r24
     c74:	cb 01       	movw	r24, r22
     c76:	8f 83       	std	Y+7, r24	; 0x07
     c78:	98 87       	std	Y+8, r25	; 0x08
     c7a:	a9 87       	std	Y+9, r26	; 0x09
     c7c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c7e:	6f 81       	ldd	r22, Y+7	; 0x07
     c80:	78 85       	ldd	r23, Y+8	; 0x08
     c82:	89 85       	ldd	r24, Y+9	; 0x09
     c84:	9a 85       	ldd	r25, Y+10	; 0x0a
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	40 e8       	ldi	r20, 0x80	; 128
     c8c:	5f e3       	ldi	r21, 0x3F	; 63
     c8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c92:	88 23       	and	r24, r24
     c94:	2c f4       	brge	.+10     	; 0xca0 <app_start+0x15a>
		__ticks = 1;
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	9e 83       	std	Y+6, r25	; 0x06
     c9c:	8d 83       	std	Y+5, r24	; 0x05
     c9e:	3f c0       	rjmp	.+126    	; 0xd1e <app_start+0x1d8>
	else if (__tmp > 65535)
     ca0:	6f 81       	ldd	r22, Y+7	; 0x07
     ca2:	78 85       	ldd	r23, Y+8	; 0x08
     ca4:	89 85       	ldd	r24, Y+9	; 0x09
     ca6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ca8:	20 e0       	ldi	r18, 0x00	; 0
     caa:	3f ef       	ldi	r19, 0xFF	; 255
     cac:	4f e7       	ldi	r20, 0x7F	; 127
     cae:	57 e4       	ldi	r21, 0x47	; 71
     cb0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cb4:	18 16       	cp	r1, r24
     cb6:	4c f5       	brge	.+82     	; 0xd0a <app_start+0x1c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cb8:	6b 85       	ldd	r22, Y+11	; 0x0b
     cba:	7c 85       	ldd	r23, Y+12	; 0x0c
     cbc:	8d 85       	ldd	r24, Y+13	; 0x0d
     cbe:	9e 85       	ldd	r25, Y+14	; 0x0e
     cc0:	20 e0       	ldi	r18, 0x00	; 0
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	40 e2       	ldi	r20, 0x20	; 32
     cc6:	51 e4       	ldi	r21, 0x41	; 65
     cc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ccc:	dc 01       	movw	r26, r24
     cce:	cb 01       	movw	r24, r22
     cd0:	bc 01       	movw	r22, r24
     cd2:	cd 01       	movw	r24, r26
     cd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cd8:	dc 01       	movw	r26, r24
     cda:	cb 01       	movw	r24, r22
     cdc:	9e 83       	std	Y+6, r25	; 0x06
     cde:	8d 83       	std	Y+5, r24	; 0x05
     ce0:	0f c0       	rjmp	.+30     	; 0xd00 <app_start+0x1ba>
     ce2:	89 e1       	ldi	r24, 0x19	; 25
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	9c 83       	std	Y+4, r25	; 0x04
     ce8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cea:	8b 81       	ldd	r24, Y+3	; 0x03
     cec:	9c 81       	ldd	r25, Y+4	; 0x04
     cee:	01 97       	sbiw	r24, 0x01	; 1
     cf0:	f1 f7       	brne	.-4      	; 0xcee <app_start+0x1a8>
     cf2:	9c 83       	std	Y+4, r25	; 0x04
     cf4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cf6:	8d 81       	ldd	r24, Y+5	; 0x05
     cf8:	9e 81       	ldd	r25, Y+6	; 0x06
     cfa:	01 97       	sbiw	r24, 0x01	; 1
     cfc:	9e 83       	std	Y+6, r25	; 0x06
     cfe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d00:	8d 81       	ldd	r24, Y+5	; 0x05
     d02:	9e 81       	ldd	r25, Y+6	; 0x06
     d04:	00 97       	sbiw	r24, 0x00	; 0
     d06:	69 f7       	brne	.-38     	; 0xce2 <app_start+0x19c>
     d08:	14 c0       	rjmp	.+40     	; 0xd32 <app_start+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d0a:	6f 81       	ldd	r22, Y+7	; 0x07
     d0c:	78 85       	ldd	r23, Y+8	; 0x08
     d0e:	89 85       	ldd	r24, Y+9	; 0x09
     d10:	9a 85       	ldd	r25, Y+10	; 0x0a
     d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d16:	dc 01       	movw	r26, r24
     d18:	cb 01       	movw	r24, r22
     d1a:	9e 83       	std	Y+6, r25	; 0x06
     d1c:	8d 83       	std	Y+5, r24	; 0x05
     d1e:	8d 81       	ldd	r24, Y+5	; 0x05
     d20:	9e 81       	ldd	r25, Y+6	; 0x06
     d22:	9a 83       	std	Y+2, r25	; 0x02
     d24:	89 83       	std	Y+1, r24	; 0x01
     d26:	89 81       	ldd	r24, Y+1	; 0x01
     d28:	9a 81       	ldd	r25, Y+2	; 0x02
     d2a:	01 97       	sbiw	r24, 0x01	; 1
     d2c:	f1 f7       	brne	.-4      	; 0xd2a <app_start+0x1e4>
     d2e:	9a 83       	std	Y+2, r25	; 0x02
     d30:	89 83       	std	Y+1, r24	; 0x01
		LED_off(PORTB_ID, PIN0_ID);
		LED_off (PORTA_ID , PIN2_ID) ;

/*________________yellows________________________________________*/
		g_theWorkingLed=yellow;
		for(i=0;i<10;i++)
     d32:	80 91 6f 00 	lds	r24, 0x006F
     d36:	8f 5f       	subi	r24, 0xFF	; 255
     d38:	80 93 6f 00 	sts	0x006F, r24
     d3c:	80 91 6f 00 	lds	r24, 0x006F
     d40:	8a 30       	cpi	r24, 0x0A	; 10
     d42:	08 f4       	brcc	.+2      	; 0xd46 <app_start+0x200>
     d44:	74 cf       	rjmp	.-280    	; 0xc2e <app_start+0xe8>
			TOGGLE_BIT(PORTA,PIN1_ID);
			_delay_ms(500);
		}

		/*to be sure the yellow will be off*/
		LED_off(PORTB_ID, PIN1_ID);
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	61 e0       	ldi	r22, 0x01	; 1
     d4a:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <LED_off>
		LED_off(PORTA_ID, PIN1_ID);
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	61 e0       	ldi	r22, 0x01	; 1
     d52:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <LED_off>

/*___________________cars red_____________________________________*/

		g_theWorkingLed=red;
     d56:	10 92 6e 00 	sts	0x006E, r1
		g_Timer_ticks=0;
     d5a:	10 92 71 00 	sts	0x0071, r1
		LED_on(PORTB_ID, PIN2_ID);
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	62 e0       	ldi	r22, 0x02	; 2
     d62:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <LED_on>
		LED_on (PORTA_ID , PIN0_ID) ;
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	60 e0       	ldi	r22, 0x00	; 0
     d6a:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <LED_on>
		Timer1_setCallBack(TIMER_ISR_COUNTER);
     d6e:	87 e1       	ldi	r24, 0x17	; 23
     d70:	99 e0       	ldi	r25, 0x09	; 9
     d72:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <Timer1_setCallBack>
		while(g_Timer_ticks!=5);
     d76:	80 91 71 00 	lds	r24, 0x0071
     d7a:	85 30       	cpi	r24, 0x05	; 5
     d7c:	e1 f7       	brne	.-8      	; 0xd76 <app_start+0x230>
		LED_off(PORTB_ID, PIN2_ID);//ped. green
     d7e:	81 e0       	ldi	r24, 0x01	; 1
     d80:	62 e0       	ldi	r22, 0x02	; 2
     d82:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <LED_off>
		LED_off (PORTA_ID , PIN0_ID) ; //car red
     d86:	80 e0       	ldi	r24, 0x00	; 0
     d88:	60 e0       	ldi	r22, 0x00	; 0
     d8a:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <LED_off>
     d8e:	28 cf       	rjmp	.-432    	; 0xbe0 <app_start+0x9a>

00000d90 <INT0_ISR_calledback>:
}



void INT0_ISR_calledback(void)
{
     d90:	df 93       	push	r29
     d92:	cf 93       	push	r28
     d94:	cd b7       	in	r28, 0x3d	; 61
     d96:	de b7       	in	r29, 0x3e	; 62
     d98:	e8 97       	sbiw	r28, 0x38	; 56
     d9a:	0f b6       	in	r0, 0x3f	; 63
     d9c:	f8 94       	cli
     d9e:	de bf       	out	0x3e, r29	; 62
     da0:	0f be       	out	0x3f, r0	; 63
     da2:	cd bf       	out	0x3d, r28	; 61
     da4:	80 e0       	ldi	r24, 0x00	; 0
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	a0 ef       	ldi	r26, 0xF0	; 240
     daa:	b1 e4       	ldi	r27, 0x41	; 65
     dac:	8d ab       	std	Y+53, r24	; 0x35
     dae:	9e ab       	std	Y+54, r25	; 0x36
     db0:	af ab       	std	Y+55, r26	; 0x37
     db2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     db4:	6d a9       	ldd	r22, Y+53	; 0x35
     db6:	7e a9       	ldd	r23, Y+54	; 0x36
     db8:	8f a9       	ldd	r24, Y+55	; 0x37
     dba:	98 ad       	ldd	r25, Y+56	; 0x38
     dbc:	20 e0       	ldi	r18, 0x00	; 0
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	4a e7       	ldi	r20, 0x7A	; 122
     dc2:	53 e4       	ldi	r21, 0x43	; 67
     dc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dc8:	dc 01       	movw	r26, r24
     dca:	cb 01       	movw	r24, r22
     dcc:	89 ab       	std	Y+49, r24	; 0x31
     dce:	9a ab       	std	Y+50, r25	; 0x32
     dd0:	ab ab       	std	Y+51, r26	; 0x33
     dd2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     dd4:	69 a9       	ldd	r22, Y+49	; 0x31
     dd6:	7a a9       	ldd	r23, Y+50	; 0x32
     dd8:	8b a9       	ldd	r24, Y+51	; 0x33
     dda:	9c a9       	ldd	r25, Y+52	; 0x34
     ddc:	20 e0       	ldi	r18, 0x00	; 0
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	40 e8       	ldi	r20, 0x80	; 128
     de2:	5f e3       	ldi	r21, 0x3F	; 63
     de4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     de8:	88 23       	and	r24, r24
     dea:	2c f4       	brge	.+10     	; 0xdf6 <INT0_ISR_calledback+0x66>
		__ticks = 1;
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	98 ab       	std	Y+48, r25	; 0x30
     df2:	8f a7       	std	Y+47, r24	; 0x2f
     df4:	3f c0       	rjmp	.+126    	; 0xe74 <INT0_ISR_calledback+0xe4>
	else if (__tmp > 65535)
     df6:	69 a9       	ldd	r22, Y+49	; 0x31
     df8:	7a a9       	ldd	r23, Y+50	; 0x32
     dfa:	8b a9       	ldd	r24, Y+51	; 0x33
     dfc:	9c a9       	ldd	r25, Y+52	; 0x34
     dfe:	20 e0       	ldi	r18, 0x00	; 0
     e00:	3f ef       	ldi	r19, 0xFF	; 255
     e02:	4f e7       	ldi	r20, 0x7F	; 127
     e04:	57 e4       	ldi	r21, 0x47	; 71
     e06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e0a:	18 16       	cp	r1, r24
     e0c:	4c f5       	brge	.+82     	; 0xe60 <INT0_ISR_calledback+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e0e:	6d a9       	ldd	r22, Y+53	; 0x35
     e10:	7e a9       	ldd	r23, Y+54	; 0x36
     e12:	8f a9       	ldd	r24, Y+55	; 0x37
     e14:	98 ad       	ldd	r25, Y+56	; 0x38
     e16:	20 e0       	ldi	r18, 0x00	; 0
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	40 e2       	ldi	r20, 0x20	; 32
     e1c:	51 e4       	ldi	r21, 0x41	; 65
     e1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e22:	dc 01       	movw	r26, r24
     e24:	cb 01       	movw	r24, r22
     e26:	bc 01       	movw	r22, r24
     e28:	cd 01       	movw	r24, r26
     e2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e2e:	dc 01       	movw	r26, r24
     e30:	cb 01       	movw	r24, r22
     e32:	98 ab       	std	Y+48, r25	; 0x30
     e34:	8f a7       	std	Y+47, r24	; 0x2f
     e36:	0f c0       	rjmp	.+30     	; 0xe56 <INT0_ISR_calledback+0xc6>
     e38:	89 e1       	ldi	r24, 0x19	; 25
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	9e a7       	std	Y+46, r25	; 0x2e
     e3e:	8d a7       	std	Y+45, r24	; 0x2d
     e40:	8d a5       	ldd	r24, Y+45	; 0x2d
     e42:	9e a5       	ldd	r25, Y+46	; 0x2e
     e44:	01 97       	sbiw	r24, 0x01	; 1
     e46:	f1 f7       	brne	.-4      	; 0xe44 <INT0_ISR_calledback+0xb4>
     e48:	9e a7       	std	Y+46, r25	; 0x2e
     e4a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e4c:	8f a5       	ldd	r24, Y+47	; 0x2f
     e4e:	98 a9       	ldd	r25, Y+48	; 0x30
     e50:	01 97       	sbiw	r24, 0x01	; 1
     e52:	98 ab       	std	Y+48, r25	; 0x30
     e54:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e56:	8f a5       	ldd	r24, Y+47	; 0x2f
     e58:	98 a9       	ldd	r25, Y+48	; 0x30
     e5a:	00 97       	sbiw	r24, 0x00	; 0
     e5c:	69 f7       	brne	.-38     	; 0xe38 <INT0_ISR_calledback+0xa8>
     e5e:	14 c0       	rjmp	.+40     	; 0xe88 <INT0_ISR_calledback+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e60:	69 a9       	ldd	r22, Y+49	; 0x31
     e62:	7a a9       	ldd	r23, Y+50	; 0x32
     e64:	8b a9       	ldd	r24, Y+51	; 0x33
     e66:	9c a9       	ldd	r25, Y+52	; 0x34
     e68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e6c:	dc 01       	movw	r26, r24
     e6e:	cb 01       	movw	r24, r22
     e70:	98 ab       	std	Y+48, r25	; 0x30
     e72:	8f a7       	std	Y+47, r24	; 0x2f
     e74:	8f a5       	ldd	r24, Y+47	; 0x2f
     e76:	98 a9       	ldd	r25, Y+48	; 0x30
     e78:	9c a7       	std	Y+44, r25	; 0x2c
     e7a:	8b a7       	std	Y+43, r24	; 0x2b
     e7c:	8b a5       	ldd	r24, Y+43	; 0x2b
     e7e:	9c a5       	ldd	r25, Y+44	; 0x2c
     e80:	01 97       	sbiw	r24, 0x01	; 1
     e82:	f1 f7       	brne	.-4      	; 0xe80 <INT0_ISR_calledback+0xf0>
     e84:	9c a7       	std	Y+44, r25	; 0x2c
     e86:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(30);
if(!(PIND&(1<<PIN2_ID)))  //to neglect the long press effect
     e88:	e0 e3       	ldi	r30, 0x30	; 48
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	88 2f       	mov	r24, r24
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	84 70       	andi	r24, 0x04	; 4
     e94:	90 70       	andi	r25, 0x00	; 0
     e96:	00 97       	sbiw	r24, 0x00	; 0
     e98:	09 f0       	breq	.+2      	; 0xe9c <INT0_ISR_calledback+0x10c>
     e9a:	c0 c1       	rjmp	.+896    	; 0x121c <INT0_ISR_calledback+0x48c>
			 * the pedestrian Red LED will be on{ NOT MENTIONED for which time so i will light it for 1 second}
			 * then bothYellow LEDs start to blink for five seconds,
			 * then the cars' Red LED and pedestrian Green LEDs are on for five seconds,
			 *this means that pedestrian must wait until the Green LED is on.
			 */
		if ((g_theWorkingLed==yellow)||(g_theWorkingLed==green))
     e9c:	80 91 6e 00 	lds	r24, 0x006E
     ea0:	81 30       	cpi	r24, 0x01	; 1
     ea2:	29 f0       	breq	.+10     	; 0xeae <INT0_ISR_calledback+0x11e>
     ea4:	80 91 6e 00 	lds	r24, 0x006E
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	09 f0       	breq	.+2      	; 0xeae <INT0_ISR_calledback+0x11e>
     eac:	b7 c1       	rjmp	.+878    	; 0x121c <INT0_ISR_calledback+0x48c>
		{
			LED_off(PORTB_ID, PIN2_ID);//ped. green
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	62 e0       	ldi	r22, 0x02	; 2
     eb2:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <LED_off>
			LED_off (PORTA_ID , PIN0_ID) ; //car red
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	60 e0       	ldi	r22, 0x00	; 0
     eba:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <LED_off>
			LED_off(PORTB_ID, PIN0_ID);
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	60 e0       	ldi	r22, 0x00	; 0
     ec2:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <LED_off>
			LED_off (PORTA_ID , PIN2_ID) ;
     ec6:	80 e0       	ldi	r24, 0x00	; 0
     ec8:	62 e0       	ldi	r22, 0x02	; 2
     eca:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <LED_off>
			LED_off(PORTB_ID, PIN1_ID);
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	61 e0       	ldi	r22, 0x01	; 1
     ed2:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <LED_off>
			LED_off(PORTA_ID, PIN1_ID);
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	61 e0       	ldi	r22, 0x01	; 1
     eda:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <LED_off>

			LED_on(PORTB_ID, PIN0_ID);//pedestrian red
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <LED_on>
			LED_on(PORTA_ID, PIN2_ID);
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	62 e0       	ldi	r22, 0x02	; 2
     eea:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <LED_on>
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	aa e7       	ldi	r26, 0x7A	; 122
     ef4:	b4 e4       	ldi	r27, 0x44	; 68
     ef6:	8f a3       	std	Y+39, r24	; 0x27
     ef8:	98 a7       	std	Y+40, r25	; 0x28
     efa:	a9 a7       	std	Y+41, r26	; 0x29
     efc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     efe:	6f a1       	ldd	r22, Y+39	; 0x27
     f00:	78 a5       	ldd	r23, Y+40	; 0x28
     f02:	89 a5       	ldd	r24, Y+41	; 0x29
     f04:	9a a5       	ldd	r25, Y+42	; 0x2a
     f06:	20 e0       	ldi	r18, 0x00	; 0
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	4a e7       	ldi	r20, 0x7A	; 122
     f0c:	53 e4       	ldi	r21, 0x43	; 67
     f0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f12:	dc 01       	movw	r26, r24
     f14:	cb 01       	movw	r24, r22
     f16:	8b a3       	std	Y+35, r24	; 0x23
     f18:	9c a3       	std	Y+36, r25	; 0x24
     f1a:	ad a3       	std	Y+37, r26	; 0x25
     f1c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     f1e:	6b a1       	ldd	r22, Y+35	; 0x23
     f20:	7c a1       	ldd	r23, Y+36	; 0x24
     f22:	8d a1       	ldd	r24, Y+37	; 0x25
     f24:	9e a1       	ldd	r25, Y+38	; 0x26
     f26:	20 e0       	ldi	r18, 0x00	; 0
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	40 e8       	ldi	r20, 0x80	; 128
     f2c:	5f e3       	ldi	r21, 0x3F	; 63
     f2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f32:	88 23       	and	r24, r24
     f34:	2c f4       	brge	.+10     	; 0xf40 <INT0_ISR_calledback+0x1b0>
		__ticks = 1;
     f36:	81 e0       	ldi	r24, 0x01	; 1
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	9a a3       	std	Y+34, r25	; 0x22
     f3c:	89 a3       	std	Y+33, r24	; 0x21
     f3e:	3f c0       	rjmp	.+126    	; 0xfbe <INT0_ISR_calledback+0x22e>
	else if (__tmp > 65535)
     f40:	6b a1       	ldd	r22, Y+35	; 0x23
     f42:	7c a1       	ldd	r23, Y+36	; 0x24
     f44:	8d a1       	ldd	r24, Y+37	; 0x25
     f46:	9e a1       	ldd	r25, Y+38	; 0x26
     f48:	20 e0       	ldi	r18, 0x00	; 0
     f4a:	3f ef       	ldi	r19, 0xFF	; 255
     f4c:	4f e7       	ldi	r20, 0x7F	; 127
     f4e:	57 e4       	ldi	r21, 0x47	; 71
     f50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f54:	18 16       	cp	r1, r24
     f56:	4c f5       	brge	.+82     	; 0xfaa <INT0_ISR_calledback+0x21a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f58:	6f a1       	ldd	r22, Y+39	; 0x27
     f5a:	78 a5       	ldd	r23, Y+40	; 0x28
     f5c:	89 a5       	ldd	r24, Y+41	; 0x29
     f5e:	9a a5       	ldd	r25, Y+42	; 0x2a
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	40 e2       	ldi	r20, 0x20	; 32
     f66:	51 e4       	ldi	r21, 0x41	; 65
     f68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f6c:	dc 01       	movw	r26, r24
     f6e:	cb 01       	movw	r24, r22
     f70:	bc 01       	movw	r22, r24
     f72:	cd 01       	movw	r24, r26
     f74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f78:	dc 01       	movw	r26, r24
     f7a:	cb 01       	movw	r24, r22
     f7c:	9a a3       	std	Y+34, r25	; 0x22
     f7e:	89 a3       	std	Y+33, r24	; 0x21
     f80:	0f c0       	rjmp	.+30     	; 0xfa0 <INT0_ISR_calledback+0x210>
     f82:	89 e1       	ldi	r24, 0x19	; 25
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	98 a3       	std	Y+32, r25	; 0x20
     f88:	8f 8f       	std	Y+31, r24	; 0x1f
     f8a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f8c:	98 a1       	ldd	r25, Y+32	; 0x20
     f8e:	01 97       	sbiw	r24, 0x01	; 1
     f90:	f1 f7       	brne	.-4      	; 0xf8e <INT0_ISR_calledback+0x1fe>
     f92:	98 a3       	std	Y+32, r25	; 0x20
     f94:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f96:	89 a1       	ldd	r24, Y+33	; 0x21
     f98:	9a a1       	ldd	r25, Y+34	; 0x22
     f9a:	01 97       	sbiw	r24, 0x01	; 1
     f9c:	9a a3       	std	Y+34, r25	; 0x22
     f9e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fa0:	89 a1       	ldd	r24, Y+33	; 0x21
     fa2:	9a a1       	ldd	r25, Y+34	; 0x22
     fa4:	00 97       	sbiw	r24, 0x00	; 0
     fa6:	69 f7       	brne	.-38     	; 0xf82 <INT0_ISR_calledback+0x1f2>
     fa8:	14 c0       	rjmp	.+40     	; 0xfd2 <INT0_ISR_calledback+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     faa:	6b a1       	ldd	r22, Y+35	; 0x23
     fac:	7c a1       	ldd	r23, Y+36	; 0x24
     fae:	8d a1       	ldd	r24, Y+37	; 0x25
     fb0:	9e a1       	ldd	r25, Y+38	; 0x26
     fb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fb6:	dc 01       	movw	r26, r24
     fb8:	cb 01       	movw	r24, r22
     fba:	9a a3       	std	Y+34, r25	; 0x22
     fbc:	89 a3       	std	Y+33, r24	; 0x21
     fbe:	89 a1       	ldd	r24, Y+33	; 0x21
     fc0:	9a a1       	ldd	r25, Y+34	; 0x22
     fc2:	9e 8f       	std	Y+30, r25	; 0x1e
     fc4:	8d 8f       	std	Y+29, r24	; 0x1d
     fc6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fc8:	9e 8d       	ldd	r25, Y+30	; 0x1e
     fca:	01 97       	sbiw	r24, 0x01	; 1
     fcc:	f1 f7       	brne	.-4      	; 0xfca <INT0_ISR_calledback+0x23a>
     fce:	9e 8f       	std	Y+30, r25	; 0x1e
     fd0:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(1000);
			LED_off(PORTB_ID, PIN0_ID);//pedestrian red
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	60 e0       	ldi	r22, 0x00	; 0
     fd6:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <LED_off>
			LED_off(PORTA_ID, PIN2_ID);
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	62 e0       	ldi	r22, 0x02	; 2
     fde:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <LED_off>
			for(i=0;i<10;i++)
     fe2:	10 92 6f 00 	sts	0x006F, r1
     fe6:	87 c0       	rjmp	.+270    	; 0x10f6 <INT0_ISR_calledback+0x366>
			{

				TOGGLE_BIT(PORTB,PIN1_ID);
     fe8:	a8 e3       	ldi	r26, 0x38	; 56
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	e8 e3       	ldi	r30, 0x38	; 56
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	90 81       	ld	r25, Z
     ff2:	82 e0       	ldi	r24, 0x02	; 2
     ff4:	89 27       	eor	r24, r25
     ff6:	8c 93       	st	X, r24
				TOGGLE_BIT(PORTA,PIN1_ID);
     ff8:	ab e3       	ldi	r26, 0x3B	; 59
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	eb e3       	ldi	r30, 0x3B	; 59
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	90 81       	ld	r25, Z
    1002:	82 e0       	ldi	r24, 0x02	; 2
    1004:	89 27       	eor	r24, r25
    1006:	8c 93       	st	X, r24
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	aa ef       	ldi	r26, 0xFA	; 250
    100e:	b3 e4       	ldi	r27, 0x43	; 67
    1010:	89 8f       	std	Y+25, r24	; 0x19
    1012:	9a 8f       	std	Y+26, r25	; 0x1a
    1014:	ab 8f       	std	Y+27, r26	; 0x1b
    1016:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1018:	69 8d       	ldd	r22, Y+25	; 0x19
    101a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    101c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    101e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1020:	20 e0       	ldi	r18, 0x00	; 0
    1022:	30 e0       	ldi	r19, 0x00	; 0
    1024:	4a e7       	ldi	r20, 0x7A	; 122
    1026:	53 e4       	ldi	r21, 0x43	; 67
    1028:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    102c:	dc 01       	movw	r26, r24
    102e:	cb 01       	movw	r24, r22
    1030:	8d 8b       	std	Y+21, r24	; 0x15
    1032:	9e 8b       	std	Y+22, r25	; 0x16
    1034:	af 8b       	std	Y+23, r26	; 0x17
    1036:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1038:	6d 89       	ldd	r22, Y+21	; 0x15
    103a:	7e 89       	ldd	r23, Y+22	; 0x16
    103c:	8f 89       	ldd	r24, Y+23	; 0x17
    103e:	98 8d       	ldd	r25, Y+24	; 0x18
    1040:	20 e0       	ldi	r18, 0x00	; 0
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	40 e8       	ldi	r20, 0x80	; 128
    1046:	5f e3       	ldi	r21, 0x3F	; 63
    1048:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    104c:	88 23       	and	r24, r24
    104e:	2c f4       	brge	.+10     	; 0x105a <INT0_ISR_calledback+0x2ca>
		__ticks = 1;
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	9c 8b       	std	Y+20, r25	; 0x14
    1056:	8b 8b       	std	Y+19, r24	; 0x13
    1058:	3f c0       	rjmp	.+126    	; 0x10d8 <INT0_ISR_calledback+0x348>
	else if (__tmp > 65535)
    105a:	6d 89       	ldd	r22, Y+21	; 0x15
    105c:	7e 89       	ldd	r23, Y+22	; 0x16
    105e:	8f 89       	ldd	r24, Y+23	; 0x17
    1060:	98 8d       	ldd	r25, Y+24	; 0x18
    1062:	20 e0       	ldi	r18, 0x00	; 0
    1064:	3f ef       	ldi	r19, 0xFF	; 255
    1066:	4f e7       	ldi	r20, 0x7F	; 127
    1068:	57 e4       	ldi	r21, 0x47	; 71
    106a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    106e:	18 16       	cp	r1, r24
    1070:	4c f5       	brge	.+82     	; 0x10c4 <INT0_ISR_calledback+0x334>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1072:	69 8d       	ldd	r22, Y+25	; 0x19
    1074:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1076:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1078:	9c 8d       	ldd	r25, Y+28	; 0x1c
    107a:	20 e0       	ldi	r18, 0x00	; 0
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	40 e2       	ldi	r20, 0x20	; 32
    1080:	51 e4       	ldi	r21, 0x41	; 65
    1082:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1086:	dc 01       	movw	r26, r24
    1088:	cb 01       	movw	r24, r22
    108a:	bc 01       	movw	r22, r24
    108c:	cd 01       	movw	r24, r26
    108e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1092:	dc 01       	movw	r26, r24
    1094:	cb 01       	movw	r24, r22
    1096:	9c 8b       	std	Y+20, r25	; 0x14
    1098:	8b 8b       	std	Y+19, r24	; 0x13
    109a:	0f c0       	rjmp	.+30     	; 0x10ba <INT0_ISR_calledback+0x32a>
    109c:	89 e1       	ldi	r24, 0x19	; 25
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	9a 8b       	std	Y+18, r25	; 0x12
    10a2:	89 8b       	std	Y+17, r24	; 0x11
    10a4:	89 89       	ldd	r24, Y+17	; 0x11
    10a6:	9a 89       	ldd	r25, Y+18	; 0x12
    10a8:	01 97       	sbiw	r24, 0x01	; 1
    10aa:	f1 f7       	brne	.-4      	; 0x10a8 <INT0_ISR_calledback+0x318>
    10ac:	9a 8b       	std	Y+18, r25	; 0x12
    10ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10b0:	8b 89       	ldd	r24, Y+19	; 0x13
    10b2:	9c 89       	ldd	r25, Y+20	; 0x14
    10b4:	01 97       	sbiw	r24, 0x01	; 1
    10b6:	9c 8b       	std	Y+20, r25	; 0x14
    10b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ba:	8b 89       	ldd	r24, Y+19	; 0x13
    10bc:	9c 89       	ldd	r25, Y+20	; 0x14
    10be:	00 97       	sbiw	r24, 0x00	; 0
    10c0:	69 f7       	brne	.-38     	; 0x109c <INT0_ISR_calledback+0x30c>
    10c2:	14 c0       	rjmp	.+40     	; 0x10ec <INT0_ISR_calledback+0x35c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10c4:	6d 89       	ldd	r22, Y+21	; 0x15
    10c6:	7e 89       	ldd	r23, Y+22	; 0x16
    10c8:	8f 89       	ldd	r24, Y+23	; 0x17
    10ca:	98 8d       	ldd	r25, Y+24	; 0x18
    10cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10d0:	dc 01       	movw	r26, r24
    10d2:	cb 01       	movw	r24, r22
    10d4:	9c 8b       	std	Y+20, r25	; 0x14
    10d6:	8b 8b       	std	Y+19, r24	; 0x13
    10d8:	8b 89       	ldd	r24, Y+19	; 0x13
    10da:	9c 89       	ldd	r25, Y+20	; 0x14
    10dc:	98 8b       	std	Y+16, r25	; 0x10
    10de:	8f 87       	std	Y+15, r24	; 0x0f
    10e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    10e2:	98 89       	ldd	r25, Y+16	; 0x10
    10e4:	01 97       	sbiw	r24, 0x01	; 1
    10e6:	f1 f7       	brne	.-4      	; 0x10e4 <INT0_ISR_calledback+0x354>
    10e8:	98 8b       	std	Y+16, r25	; 0x10
    10ea:	8f 87       	std	Y+15, r24	; 0x0f
			LED_on(PORTB_ID, PIN0_ID);//pedestrian red
			LED_on(PORTA_ID, PIN2_ID);
			_delay_ms(1000);
			LED_off(PORTB_ID, PIN0_ID);//pedestrian red
			LED_off(PORTA_ID, PIN2_ID);
			for(i=0;i<10;i++)
    10ec:	80 91 6f 00 	lds	r24, 0x006F
    10f0:	8f 5f       	subi	r24, 0xFF	; 255
    10f2:	80 93 6f 00 	sts	0x006F, r24
    10f6:	80 91 6f 00 	lds	r24, 0x006F
    10fa:	8a 30       	cpi	r24, 0x0A	; 10
    10fc:	08 f4       	brcc	.+2      	; 0x1100 <INT0_ISR_calledback+0x370>
    10fe:	74 cf       	rjmp	.-280    	; 0xfe8 <INT0_ISR_calledback+0x258>
				TOGGLE_BIT(PORTA,PIN1_ID);
				_delay_ms(500);

			}
			/*to be sure the yellow will be off*/
			LED_off(PORTB_ID, PIN1_ID);
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	61 e0       	ldi	r22, 0x01	; 1
    1104:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <LED_off>
			LED_off(PORTA_ID, PIN1_ID);
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	61 e0       	ldi	r22, 0x01	; 1
    110c:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <LED_off>


			//g_Timer_ticks=0;
			LED_on(PORTB_ID, PIN2_ID);
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	62 e0       	ldi	r22, 0x02	; 2
    1114:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <LED_on>
			LED_on (PORTA_ID , PIN0_ID) ;
    1118:	80 e0       	ldi	r24, 0x00	; 0
    111a:	60 e0       	ldi	r22, 0x00	; 0
    111c:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <LED_on>
			Timer1_setCallBack(TIMER_ISR_COUNTER);
    1120:	87 e1       	ldi	r24, 0x17	; 23
    1122:	99 e0       	ldi	r25, 0x09	; 9
    1124:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <Timer1_setCallBack>
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	90 e4       	ldi	r25, 0x40	; 64
    112c:	ac e9       	ldi	r26, 0x9C	; 156
    112e:	b5 e4       	ldi	r27, 0x45	; 69
    1130:	8b 87       	std	Y+11, r24	; 0x0b
    1132:	9c 87       	std	Y+12, r25	; 0x0c
    1134:	ad 87       	std	Y+13, r26	; 0x0d
    1136:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1138:	6b 85       	ldd	r22, Y+11	; 0x0b
    113a:	7c 85       	ldd	r23, Y+12	; 0x0c
    113c:	8d 85       	ldd	r24, Y+13	; 0x0d
    113e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	4a e7       	ldi	r20, 0x7A	; 122
    1146:	53 e4       	ldi	r21, 0x43	; 67
    1148:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    114c:	dc 01       	movw	r26, r24
    114e:	cb 01       	movw	r24, r22
    1150:	8f 83       	std	Y+7, r24	; 0x07
    1152:	98 87       	std	Y+8, r25	; 0x08
    1154:	a9 87       	std	Y+9, r26	; 0x09
    1156:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1158:	6f 81       	ldd	r22, Y+7	; 0x07
    115a:	78 85       	ldd	r23, Y+8	; 0x08
    115c:	89 85       	ldd	r24, Y+9	; 0x09
    115e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	40 e8       	ldi	r20, 0x80	; 128
    1166:	5f e3       	ldi	r21, 0x3F	; 63
    1168:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    116c:	88 23       	and	r24, r24
    116e:	2c f4       	brge	.+10     	; 0x117a <INT0_ISR_calledback+0x3ea>
		__ticks = 1;
    1170:	81 e0       	ldi	r24, 0x01	; 1
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	9e 83       	std	Y+6, r25	; 0x06
    1176:	8d 83       	std	Y+5, r24	; 0x05
    1178:	3f c0       	rjmp	.+126    	; 0x11f8 <INT0_ISR_calledback+0x468>
	else if (__tmp > 65535)
    117a:	6f 81       	ldd	r22, Y+7	; 0x07
    117c:	78 85       	ldd	r23, Y+8	; 0x08
    117e:	89 85       	ldd	r24, Y+9	; 0x09
    1180:	9a 85       	ldd	r25, Y+10	; 0x0a
    1182:	20 e0       	ldi	r18, 0x00	; 0
    1184:	3f ef       	ldi	r19, 0xFF	; 255
    1186:	4f e7       	ldi	r20, 0x7F	; 127
    1188:	57 e4       	ldi	r21, 0x47	; 71
    118a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    118e:	18 16       	cp	r1, r24
    1190:	4c f5       	brge	.+82     	; 0x11e4 <INT0_ISR_calledback+0x454>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1192:	6b 85       	ldd	r22, Y+11	; 0x0b
    1194:	7c 85       	ldd	r23, Y+12	; 0x0c
    1196:	8d 85       	ldd	r24, Y+13	; 0x0d
    1198:	9e 85       	ldd	r25, Y+14	; 0x0e
    119a:	20 e0       	ldi	r18, 0x00	; 0
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	40 e2       	ldi	r20, 0x20	; 32
    11a0:	51 e4       	ldi	r21, 0x41	; 65
    11a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11a6:	dc 01       	movw	r26, r24
    11a8:	cb 01       	movw	r24, r22
    11aa:	bc 01       	movw	r22, r24
    11ac:	cd 01       	movw	r24, r26
    11ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11b2:	dc 01       	movw	r26, r24
    11b4:	cb 01       	movw	r24, r22
    11b6:	9e 83       	std	Y+6, r25	; 0x06
    11b8:	8d 83       	std	Y+5, r24	; 0x05
    11ba:	0f c0       	rjmp	.+30     	; 0x11da <INT0_ISR_calledback+0x44a>
    11bc:	89 e1       	ldi	r24, 0x19	; 25
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	9c 83       	std	Y+4, r25	; 0x04
    11c2:	8b 83       	std	Y+3, r24	; 0x03
    11c4:	8b 81       	ldd	r24, Y+3	; 0x03
    11c6:	9c 81       	ldd	r25, Y+4	; 0x04
    11c8:	01 97       	sbiw	r24, 0x01	; 1
    11ca:	f1 f7       	brne	.-4      	; 0x11c8 <INT0_ISR_calledback+0x438>
    11cc:	9c 83       	std	Y+4, r25	; 0x04
    11ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11d0:	8d 81       	ldd	r24, Y+5	; 0x05
    11d2:	9e 81       	ldd	r25, Y+6	; 0x06
    11d4:	01 97       	sbiw	r24, 0x01	; 1
    11d6:	9e 83       	std	Y+6, r25	; 0x06
    11d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11da:	8d 81       	ldd	r24, Y+5	; 0x05
    11dc:	9e 81       	ldd	r25, Y+6	; 0x06
    11de:	00 97       	sbiw	r24, 0x00	; 0
    11e0:	69 f7       	brne	.-38     	; 0x11bc <INT0_ISR_calledback+0x42c>
    11e2:	14 c0       	rjmp	.+40     	; 0x120c <INT0_ISR_calledback+0x47c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11e4:	6f 81       	ldd	r22, Y+7	; 0x07
    11e6:	78 85       	ldd	r23, Y+8	; 0x08
    11e8:	89 85       	ldd	r24, Y+9	; 0x09
    11ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11f0:	dc 01       	movw	r26, r24
    11f2:	cb 01       	movw	r24, r22
    11f4:	9e 83       	std	Y+6, r25	; 0x06
    11f6:	8d 83       	std	Y+5, r24	; 0x05
    11f8:	8d 81       	ldd	r24, Y+5	; 0x05
    11fa:	9e 81       	ldd	r25, Y+6	; 0x06
    11fc:	9a 83       	std	Y+2, r25	; 0x02
    11fe:	89 83       	std	Y+1, r24	; 0x01
    1200:	89 81       	ldd	r24, Y+1	; 0x01
    1202:	9a 81       	ldd	r25, Y+2	; 0x02
    1204:	01 97       	sbiw	r24, 0x01	; 1
    1206:	f1 f7       	brne	.-4      	; 0x1204 <INT0_ISR_calledback+0x474>
    1208:	9a 83       	std	Y+2, r25	; 0x02
    120a:	89 83       	std	Y+1, r24	; 0x01
			//while(g_Timer_ticks!=5);
			_delay_ms(5000);
			LED_off(PORTB_ID, PIN2_ID);//ped. green
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	62 e0       	ldi	r22, 0x02	; 2
    1210:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <LED_off>
			LED_off (PORTA_ID , PIN0_ID) ; //car red
    1214:	80 e0       	ldi	r24, 0x00	; 0
    1216:	60 e0       	ldi	r22, 0x00	; 0
    1218:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <LED_off>

else{

}

}
    121c:	e8 96       	adiw	r28, 0x38	; 56
    121e:	0f b6       	in	r0, 0x3f	; 63
    1220:	f8 94       	cli
    1222:	de bf       	out	0x3e, r29	; 62
    1224:	0f be       	out	0x3f, r0	; 63
    1226:	cd bf       	out	0x3d, r28	; 61
    1228:	cf 91       	pop	r28
    122a:	df 91       	pop	r29
    122c:	08 95       	ret

0000122e <TIMER_ISR_COUNTER>:
 */



void TIMER_ISR_COUNTER(void)
{
    122e:	df 93       	push	r29
    1230:	cf 93       	push	r28
    1232:	cd b7       	in	r28, 0x3d	; 61
    1234:	de b7       	in	r29, 0x3e	; 62
	g_Timer_ticks++;
    1236:	80 91 71 00 	lds	r24, 0x0071
    123a:	8f 5f       	subi	r24, 0xFF	; 255
    123c:	80 93 71 00 	sts	0x0071, r24
}
    1240:	cf 91       	pop	r28
    1242:	df 91       	pop	r29
    1244:	08 95       	ret

00001246 <main>:
#include "../application/app.h"
int main(void)
{
    1246:	df 93       	push	r29
    1248:	cf 93       	push	r28
    124a:	cd b7       	in	r28, 0x3d	; 61
    124c:	de b7       	in	r29, 0x3e	; 62
	 app_start();
    124e:	0e 94 a3 05 	call	0xb46	; 0xb46 <app_start>
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	90 e0       	ldi	r25, 0x00	; 0

}
    1256:	cf 91       	pop	r28
    1258:	df 91       	pop	r29
    125a:	08 95       	ret

0000125c <__vector_1>:
 *                       Interrupt Service Routines                            *
 *******************************************************************************/


ISR(INT0_vect)
{
    125c:	1f 92       	push	r1
    125e:	0f 92       	push	r0
    1260:	0f b6       	in	r0, 0x3f	; 63
    1262:	0f 92       	push	r0
    1264:	11 24       	eor	r1, r1
    1266:	2f 93       	push	r18
    1268:	3f 93       	push	r19
    126a:	4f 93       	push	r20
    126c:	5f 93       	push	r21
    126e:	6f 93       	push	r22
    1270:	7f 93       	push	r23
    1272:	8f 93       	push	r24
    1274:	9f 93       	push	r25
    1276:	af 93       	push	r26
    1278:	bf 93       	push	r27
    127a:	ef 93       	push	r30
    127c:	ff 93       	push	r31
    127e:	df 93       	push	r29
    1280:	cf 93       	push	r28
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62

	if(g_INT0_callBackPtr != NULL_PTR)
    1286:	80 91 72 00 	lds	r24, 0x0072
    128a:	90 91 73 00 	lds	r25, 0x0073
    128e:	00 97       	sbiw	r24, 0x00	; 0
    1290:	29 f0       	breq	.+10     	; 0x129c <__vector_1+0x40>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_INT0_callBackPtr )();
    1292:	e0 91 72 00 	lds	r30, 0x0072
    1296:	f0 91 73 00 	lds	r31, 0x0073
    129a:	09 95       	icall
		}
}
    129c:	cf 91       	pop	r28
    129e:	df 91       	pop	r29
    12a0:	ff 91       	pop	r31
    12a2:	ef 91       	pop	r30
    12a4:	bf 91       	pop	r27
    12a6:	af 91       	pop	r26
    12a8:	9f 91       	pop	r25
    12aa:	8f 91       	pop	r24
    12ac:	7f 91       	pop	r23
    12ae:	6f 91       	pop	r22
    12b0:	5f 91       	pop	r21
    12b2:	4f 91       	pop	r20
    12b4:	3f 91       	pop	r19
    12b6:	2f 91       	pop	r18
    12b8:	0f 90       	pop	r0
    12ba:	0f be       	out	0x3f, r0	; 63
    12bc:	0f 90       	pop	r0
    12be:	1f 90       	pop	r1
    12c0:	18 95       	reti

000012c2 <INT0_init>:


/* External INT0 enable and configuration function */
void INT0_init(void)
{
    12c2:	df 93       	push	r29
    12c4:	cf 93       	push	r28
    12c6:	cd b7       	in	r28, 0x3d	; 61
    12c8:	de b7       	in	r29, 0x3e	; 62
	DDRD  &= (~(1<<PD2));               // Configure INT0/PD2 as input pin
    12ca:	a1 e3       	ldi	r26, 0x31	; 49
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	e1 e3       	ldi	r30, 0x31	; 49
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	8b 7f       	andi	r24, 0xFB	; 251
    12d6:	8c 93       	st	X, r24
	MCUCR |= (1<<ISC00) | (1<<ISC01);   // Trigger INT0 with the raising edge
    12d8:	a5 e5       	ldi	r26, 0x55	; 85
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	e5 e5       	ldi	r30, 0x55	; 85
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	83 60       	ori	r24, 0x03	; 3
    12e4:	8c 93       	st	X, r24
	GICR  |= (1<<INT0);                 // Enable external interrupt pin INT0
    12e6:	ab e5       	ldi	r26, 0x5B	; 91
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	eb e5       	ldi	r30, 0x5B	; 91
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	80 64       	ori	r24, 0x40	; 64
    12f2:	8c 93       	st	X, r24
	SREG  |= (1<<7);                    // Enable interrupts by setting I-bit
    12f4:	af e5       	ldi	r26, 0x5F	; 95
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	ef e5       	ldi	r30, 0x5F	; 95
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	80 68       	ori	r24, 0x80	; 128
    1300:	8c 93       	st	X, r24
}
    1302:	cf 91       	pop	r28
    1304:	df 91       	pop	r29
    1306:	08 95       	ret

00001308 <INT0_setCallBack>:


void INT0_setCallBack(void(*a_ptr)(void))
{
    1308:	df 93       	push	r29
    130a:	cf 93       	push	r28
    130c:	00 d0       	rcall	.+0      	; 0x130e <INT0_setCallBack+0x6>
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
    1312:	9a 83       	std	Y+2, r25	; 0x02
    1314:	89 83       	std	Y+1, r24	; 0x01

	/* Save the address of the Call back function in a global variable */
	g_INT0_callBackPtr = a_ptr;
    1316:	89 81       	ldd	r24, Y+1	; 0x01
    1318:	9a 81       	ldd	r25, Y+2	; 0x02
    131a:	90 93 73 00 	sts	0x0073, r25
    131e:	80 93 72 00 	sts	0x0072, r24

}
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	cf 91       	pop	r28
    1328:	df 91       	pop	r29
    132a:	08 95       	ret

0000132c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    132c:	df 93       	push	r29
    132e:	cf 93       	push	r28
    1330:	00 d0       	rcall	.+0      	; 0x1332 <GPIO_setupPinDirection+0x6>
    1332:	00 d0       	rcall	.+0      	; 0x1334 <GPIO_setupPinDirection+0x8>
    1334:	0f 92       	push	r0
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
    133a:	89 83       	std	Y+1, r24	; 0x01
    133c:	6a 83       	std	Y+2, r22	; 0x02
    133e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1340:	8a 81       	ldd	r24, Y+2	; 0x02
    1342:	88 30       	cpi	r24, 0x08	; 8
    1344:	08 f0       	brcs	.+2      	; 0x1348 <GPIO_setupPinDirection+0x1c>
    1346:	d5 c0       	rjmp	.+426    	; 0x14f2 <GPIO_setupPinDirection+0x1c6>
    1348:	89 81       	ldd	r24, Y+1	; 0x01
    134a:	84 30       	cpi	r24, 0x04	; 4
    134c:	08 f0       	brcs	.+2      	; 0x1350 <GPIO_setupPinDirection+0x24>
    134e:	d1 c0       	rjmp	.+418    	; 0x14f2 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1350:	89 81       	ldd	r24, Y+1	; 0x01
    1352:	28 2f       	mov	r18, r24
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	3d 83       	std	Y+5, r19	; 0x05
    1358:	2c 83       	std	Y+4, r18	; 0x04
    135a:	8c 81       	ldd	r24, Y+4	; 0x04
    135c:	9d 81       	ldd	r25, Y+5	; 0x05
    135e:	81 30       	cpi	r24, 0x01	; 1
    1360:	91 05       	cpc	r25, r1
    1362:	09 f4       	brne	.+2      	; 0x1366 <GPIO_setupPinDirection+0x3a>
    1364:	43 c0       	rjmp	.+134    	; 0x13ec <GPIO_setupPinDirection+0xc0>
    1366:	2c 81       	ldd	r18, Y+4	; 0x04
    1368:	3d 81       	ldd	r19, Y+5	; 0x05
    136a:	22 30       	cpi	r18, 0x02	; 2
    136c:	31 05       	cpc	r19, r1
    136e:	2c f4       	brge	.+10     	; 0x137a <GPIO_setupPinDirection+0x4e>
    1370:	8c 81       	ldd	r24, Y+4	; 0x04
    1372:	9d 81       	ldd	r25, Y+5	; 0x05
    1374:	00 97       	sbiw	r24, 0x00	; 0
    1376:	71 f0       	breq	.+28     	; 0x1394 <GPIO_setupPinDirection+0x68>
    1378:	bc c0       	rjmp	.+376    	; 0x14f2 <GPIO_setupPinDirection+0x1c6>
    137a:	2c 81       	ldd	r18, Y+4	; 0x04
    137c:	3d 81       	ldd	r19, Y+5	; 0x05
    137e:	22 30       	cpi	r18, 0x02	; 2
    1380:	31 05       	cpc	r19, r1
    1382:	09 f4       	brne	.+2      	; 0x1386 <GPIO_setupPinDirection+0x5a>
    1384:	5f c0       	rjmp	.+190    	; 0x1444 <GPIO_setupPinDirection+0x118>
    1386:	8c 81       	ldd	r24, Y+4	; 0x04
    1388:	9d 81       	ldd	r25, Y+5	; 0x05
    138a:	83 30       	cpi	r24, 0x03	; 3
    138c:	91 05       	cpc	r25, r1
    138e:	09 f4       	brne	.+2      	; 0x1392 <GPIO_setupPinDirection+0x66>
    1390:	85 c0       	rjmp	.+266    	; 0x149c <GPIO_setupPinDirection+0x170>
    1392:	af c0       	rjmp	.+350    	; 0x14f2 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	81 30       	cpi	r24, 0x01	; 1
    1398:	a1 f4       	brne	.+40     	; 0x13c2 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    139a:	aa e3       	ldi	r26, 0x3A	; 58
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	ea e3       	ldi	r30, 0x3A	; 58
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	48 2f       	mov	r20, r24
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	28 2f       	mov	r18, r24
    13aa:	30 e0       	ldi	r19, 0x00	; 0
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	02 2e       	mov	r0, r18
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <GPIO_setupPinDirection+0x8c>
    13b4:	88 0f       	add	r24, r24
    13b6:	99 1f       	adc	r25, r25
    13b8:	0a 94       	dec	r0
    13ba:	e2 f7       	brpl	.-8      	; 0x13b4 <GPIO_setupPinDirection+0x88>
    13bc:	84 2b       	or	r24, r20
    13be:	8c 93       	st	X, r24
    13c0:	98 c0       	rjmp	.+304    	; 0x14f2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    13c2:	aa e3       	ldi	r26, 0x3A	; 58
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	ea e3       	ldi	r30, 0x3A	; 58
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	48 2f       	mov	r20, r24
    13ce:	8a 81       	ldd	r24, Y+2	; 0x02
    13d0:	28 2f       	mov	r18, r24
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	02 2e       	mov	r0, r18
    13da:	02 c0       	rjmp	.+4      	; 0x13e0 <GPIO_setupPinDirection+0xb4>
    13dc:	88 0f       	add	r24, r24
    13de:	99 1f       	adc	r25, r25
    13e0:	0a 94       	dec	r0
    13e2:	e2 f7       	brpl	.-8      	; 0x13dc <GPIO_setupPinDirection+0xb0>
    13e4:	80 95       	com	r24
    13e6:	84 23       	and	r24, r20
    13e8:	8c 93       	st	X, r24
    13ea:	83 c0       	rjmp	.+262    	; 0x14f2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    13ec:	8b 81       	ldd	r24, Y+3	; 0x03
    13ee:	81 30       	cpi	r24, 0x01	; 1
    13f0:	a1 f4       	brne	.+40     	; 0x141a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    13f2:	a7 e3       	ldi	r26, 0x37	; 55
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	e7 e3       	ldi	r30, 0x37	; 55
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	48 2f       	mov	r20, r24
    13fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	02 2e       	mov	r0, r18
    140a:	02 c0       	rjmp	.+4      	; 0x1410 <GPIO_setupPinDirection+0xe4>
    140c:	88 0f       	add	r24, r24
    140e:	99 1f       	adc	r25, r25
    1410:	0a 94       	dec	r0
    1412:	e2 f7       	brpl	.-8      	; 0x140c <GPIO_setupPinDirection+0xe0>
    1414:	84 2b       	or	r24, r20
    1416:	8c 93       	st	X, r24
    1418:	6c c0       	rjmp	.+216    	; 0x14f2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    141a:	a7 e3       	ldi	r26, 0x37	; 55
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e7 e3       	ldi	r30, 0x37	; 55
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	48 2f       	mov	r20, r24
    1426:	8a 81       	ldd	r24, Y+2	; 0x02
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	02 2e       	mov	r0, r18
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <GPIO_setupPinDirection+0x10c>
    1434:	88 0f       	add	r24, r24
    1436:	99 1f       	adc	r25, r25
    1438:	0a 94       	dec	r0
    143a:	e2 f7       	brpl	.-8      	; 0x1434 <GPIO_setupPinDirection+0x108>
    143c:	80 95       	com	r24
    143e:	84 23       	and	r24, r20
    1440:	8c 93       	st	X, r24
    1442:	57 c0       	rjmp	.+174    	; 0x14f2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1444:	8b 81       	ldd	r24, Y+3	; 0x03
    1446:	81 30       	cpi	r24, 0x01	; 1
    1448:	a1 f4       	brne	.+40     	; 0x1472 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    144a:	a4 e3       	ldi	r26, 0x34	; 52
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	e4 e3       	ldi	r30, 0x34	; 52
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	48 2f       	mov	r20, r24
    1456:	8a 81       	ldd	r24, Y+2	; 0x02
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	81 e0       	ldi	r24, 0x01	; 1
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	02 2e       	mov	r0, r18
    1462:	02 c0       	rjmp	.+4      	; 0x1468 <GPIO_setupPinDirection+0x13c>
    1464:	88 0f       	add	r24, r24
    1466:	99 1f       	adc	r25, r25
    1468:	0a 94       	dec	r0
    146a:	e2 f7       	brpl	.-8      	; 0x1464 <GPIO_setupPinDirection+0x138>
    146c:	84 2b       	or	r24, r20
    146e:	8c 93       	st	X, r24
    1470:	40 c0       	rjmp	.+128    	; 0x14f2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1472:	a4 e3       	ldi	r26, 0x34	; 52
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	e4 e3       	ldi	r30, 0x34	; 52
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	48 2f       	mov	r20, r24
    147e:	8a 81       	ldd	r24, Y+2	; 0x02
    1480:	28 2f       	mov	r18, r24
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	02 2e       	mov	r0, r18
    148a:	02 c0       	rjmp	.+4      	; 0x1490 <GPIO_setupPinDirection+0x164>
    148c:	88 0f       	add	r24, r24
    148e:	99 1f       	adc	r25, r25
    1490:	0a 94       	dec	r0
    1492:	e2 f7       	brpl	.-8      	; 0x148c <GPIO_setupPinDirection+0x160>
    1494:	80 95       	com	r24
    1496:	84 23       	and	r24, r20
    1498:	8c 93       	st	X, r24
    149a:	2b c0       	rjmp	.+86     	; 0x14f2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    149c:	8b 81       	ldd	r24, Y+3	; 0x03
    149e:	81 30       	cpi	r24, 0x01	; 1
    14a0:	a1 f4       	brne	.+40     	; 0x14ca <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    14a2:	a1 e3       	ldi	r26, 0x31	; 49
    14a4:	b0 e0       	ldi	r27, 0x00	; 0
    14a6:	e1 e3       	ldi	r30, 0x31	; 49
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	80 81       	ld	r24, Z
    14ac:	48 2f       	mov	r20, r24
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	28 2f       	mov	r18, r24
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	02 2e       	mov	r0, r18
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <GPIO_setupPinDirection+0x194>
    14bc:	88 0f       	add	r24, r24
    14be:	99 1f       	adc	r25, r25
    14c0:	0a 94       	dec	r0
    14c2:	e2 f7       	brpl	.-8      	; 0x14bc <GPIO_setupPinDirection+0x190>
    14c4:	84 2b       	or	r24, r20
    14c6:	8c 93       	st	X, r24
    14c8:	14 c0       	rjmp	.+40     	; 0x14f2 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    14ca:	a1 e3       	ldi	r26, 0x31	; 49
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	e1 e3       	ldi	r30, 0x31	; 49
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	48 2f       	mov	r20, r24
    14d6:	8a 81       	ldd	r24, Y+2	; 0x02
    14d8:	28 2f       	mov	r18, r24
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	02 2e       	mov	r0, r18
    14e2:	02 c0       	rjmp	.+4      	; 0x14e8 <GPIO_setupPinDirection+0x1bc>
    14e4:	88 0f       	add	r24, r24
    14e6:	99 1f       	adc	r25, r25
    14e8:	0a 94       	dec	r0
    14ea:	e2 f7       	brpl	.-8      	; 0x14e4 <GPIO_setupPinDirection+0x1b8>
    14ec:	80 95       	com	r24
    14ee:	84 23       	and	r24, r20
    14f0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	0f 90       	pop	r0
    14fc:	cf 91       	pop	r28
    14fe:	df 91       	pop	r29
    1500:	08 95       	ret

00001502 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1502:	df 93       	push	r29
    1504:	cf 93       	push	r28
    1506:	00 d0       	rcall	.+0      	; 0x1508 <GPIO_writePin+0x6>
    1508:	00 d0       	rcall	.+0      	; 0x150a <GPIO_writePin+0x8>
    150a:	0f 92       	push	r0
    150c:	cd b7       	in	r28, 0x3d	; 61
    150e:	de b7       	in	r29, 0x3e	; 62
    1510:	89 83       	std	Y+1, r24	; 0x01
    1512:	6a 83       	std	Y+2, r22	; 0x02
    1514:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1516:	8a 81       	ldd	r24, Y+2	; 0x02
    1518:	88 30       	cpi	r24, 0x08	; 8
    151a:	08 f0       	brcs	.+2      	; 0x151e <GPIO_writePin+0x1c>
    151c:	d5 c0       	rjmp	.+426    	; 0x16c8 <GPIO_writePin+0x1c6>
    151e:	89 81       	ldd	r24, Y+1	; 0x01
    1520:	84 30       	cpi	r24, 0x04	; 4
    1522:	08 f0       	brcs	.+2      	; 0x1526 <GPIO_writePin+0x24>
    1524:	d1 c0       	rjmp	.+418    	; 0x16c8 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1526:	89 81       	ldd	r24, Y+1	; 0x01
    1528:	28 2f       	mov	r18, r24
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	3d 83       	std	Y+5, r19	; 0x05
    152e:	2c 83       	std	Y+4, r18	; 0x04
    1530:	8c 81       	ldd	r24, Y+4	; 0x04
    1532:	9d 81       	ldd	r25, Y+5	; 0x05
    1534:	81 30       	cpi	r24, 0x01	; 1
    1536:	91 05       	cpc	r25, r1
    1538:	09 f4       	brne	.+2      	; 0x153c <GPIO_writePin+0x3a>
    153a:	43 c0       	rjmp	.+134    	; 0x15c2 <GPIO_writePin+0xc0>
    153c:	2c 81       	ldd	r18, Y+4	; 0x04
    153e:	3d 81       	ldd	r19, Y+5	; 0x05
    1540:	22 30       	cpi	r18, 0x02	; 2
    1542:	31 05       	cpc	r19, r1
    1544:	2c f4       	brge	.+10     	; 0x1550 <GPIO_writePin+0x4e>
    1546:	8c 81       	ldd	r24, Y+4	; 0x04
    1548:	9d 81       	ldd	r25, Y+5	; 0x05
    154a:	00 97       	sbiw	r24, 0x00	; 0
    154c:	71 f0       	breq	.+28     	; 0x156a <GPIO_writePin+0x68>
    154e:	bc c0       	rjmp	.+376    	; 0x16c8 <GPIO_writePin+0x1c6>
    1550:	2c 81       	ldd	r18, Y+4	; 0x04
    1552:	3d 81       	ldd	r19, Y+5	; 0x05
    1554:	22 30       	cpi	r18, 0x02	; 2
    1556:	31 05       	cpc	r19, r1
    1558:	09 f4       	brne	.+2      	; 0x155c <GPIO_writePin+0x5a>
    155a:	5f c0       	rjmp	.+190    	; 0x161a <GPIO_writePin+0x118>
    155c:	8c 81       	ldd	r24, Y+4	; 0x04
    155e:	9d 81       	ldd	r25, Y+5	; 0x05
    1560:	83 30       	cpi	r24, 0x03	; 3
    1562:	91 05       	cpc	r25, r1
    1564:	09 f4       	brne	.+2      	; 0x1568 <GPIO_writePin+0x66>
    1566:	85 c0       	rjmp	.+266    	; 0x1672 <GPIO_writePin+0x170>
    1568:	af c0       	rjmp	.+350    	; 0x16c8 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    156a:	8b 81       	ldd	r24, Y+3	; 0x03
    156c:	81 30       	cpi	r24, 0x01	; 1
    156e:	a1 f4       	brne	.+40     	; 0x1598 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1570:	ab e3       	ldi	r26, 0x3B	; 59
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	eb e3       	ldi	r30, 0x3B	; 59
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	48 2f       	mov	r20, r24
    157c:	8a 81       	ldd	r24, Y+2	; 0x02
    157e:	28 2f       	mov	r18, r24
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	02 2e       	mov	r0, r18
    1588:	02 c0       	rjmp	.+4      	; 0x158e <GPIO_writePin+0x8c>
    158a:	88 0f       	add	r24, r24
    158c:	99 1f       	adc	r25, r25
    158e:	0a 94       	dec	r0
    1590:	e2 f7       	brpl	.-8      	; 0x158a <GPIO_writePin+0x88>
    1592:	84 2b       	or	r24, r20
    1594:	8c 93       	st	X, r24
    1596:	98 c0       	rjmp	.+304    	; 0x16c8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1598:	ab e3       	ldi	r26, 0x3B	; 59
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	eb e3       	ldi	r30, 0x3B	; 59
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	48 2f       	mov	r20, r24
    15a4:	8a 81       	ldd	r24, Y+2	; 0x02
    15a6:	28 2f       	mov	r18, r24
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	02 2e       	mov	r0, r18
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <GPIO_writePin+0xb4>
    15b2:	88 0f       	add	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	0a 94       	dec	r0
    15b8:	e2 f7       	brpl	.-8      	; 0x15b2 <GPIO_writePin+0xb0>
    15ba:	80 95       	com	r24
    15bc:	84 23       	and	r24, r20
    15be:	8c 93       	st	X, r24
    15c0:	83 c0       	rjmp	.+262    	; 0x16c8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	81 30       	cpi	r24, 0x01	; 1
    15c6:	a1 f4       	brne	.+40     	; 0x15f0 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    15c8:	a8 e3       	ldi	r26, 0x38	; 56
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	e8 e3       	ldi	r30, 0x38	; 56
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	48 2f       	mov	r20, r24
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
    15d6:	28 2f       	mov	r18, r24
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	02 2e       	mov	r0, r18
    15e0:	02 c0       	rjmp	.+4      	; 0x15e6 <GPIO_writePin+0xe4>
    15e2:	88 0f       	add	r24, r24
    15e4:	99 1f       	adc	r25, r25
    15e6:	0a 94       	dec	r0
    15e8:	e2 f7       	brpl	.-8      	; 0x15e2 <GPIO_writePin+0xe0>
    15ea:	84 2b       	or	r24, r20
    15ec:	8c 93       	st	X, r24
    15ee:	6c c0       	rjmp	.+216    	; 0x16c8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    15f0:	a8 e3       	ldi	r26, 0x38	; 56
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	e8 e3       	ldi	r30, 0x38	; 56
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	48 2f       	mov	r20, r24
    15fc:	8a 81       	ldd	r24, Y+2	; 0x02
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	02 2e       	mov	r0, r18
    1608:	02 c0       	rjmp	.+4      	; 0x160e <GPIO_writePin+0x10c>
    160a:	88 0f       	add	r24, r24
    160c:	99 1f       	adc	r25, r25
    160e:	0a 94       	dec	r0
    1610:	e2 f7       	brpl	.-8      	; 0x160a <GPIO_writePin+0x108>
    1612:	80 95       	com	r24
    1614:	84 23       	and	r24, r20
    1616:	8c 93       	st	X, r24
    1618:	57 c0       	rjmp	.+174    	; 0x16c8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    161a:	8b 81       	ldd	r24, Y+3	; 0x03
    161c:	81 30       	cpi	r24, 0x01	; 1
    161e:	a1 f4       	brne	.+40     	; 0x1648 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1620:	a5 e3       	ldi	r26, 0x35	; 53
    1622:	b0 e0       	ldi	r27, 0x00	; 0
    1624:	e5 e3       	ldi	r30, 0x35	; 53
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	80 81       	ld	r24, Z
    162a:	48 2f       	mov	r20, r24
    162c:	8a 81       	ldd	r24, Y+2	; 0x02
    162e:	28 2f       	mov	r18, r24
    1630:	30 e0       	ldi	r19, 0x00	; 0
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	02 2e       	mov	r0, r18
    1638:	02 c0       	rjmp	.+4      	; 0x163e <GPIO_writePin+0x13c>
    163a:	88 0f       	add	r24, r24
    163c:	99 1f       	adc	r25, r25
    163e:	0a 94       	dec	r0
    1640:	e2 f7       	brpl	.-8      	; 0x163a <GPIO_writePin+0x138>
    1642:	84 2b       	or	r24, r20
    1644:	8c 93       	st	X, r24
    1646:	40 c0       	rjmp	.+128    	; 0x16c8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1648:	a5 e3       	ldi	r26, 0x35	; 53
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	e5 e3       	ldi	r30, 0x35	; 53
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	48 2f       	mov	r20, r24
    1654:	8a 81       	ldd	r24, Y+2	; 0x02
    1656:	28 2f       	mov	r18, r24
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	81 e0       	ldi	r24, 0x01	; 1
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	02 2e       	mov	r0, r18
    1660:	02 c0       	rjmp	.+4      	; 0x1666 <GPIO_writePin+0x164>
    1662:	88 0f       	add	r24, r24
    1664:	99 1f       	adc	r25, r25
    1666:	0a 94       	dec	r0
    1668:	e2 f7       	brpl	.-8      	; 0x1662 <GPIO_writePin+0x160>
    166a:	80 95       	com	r24
    166c:	84 23       	and	r24, r20
    166e:	8c 93       	st	X, r24
    1670:	2b c0       	rjmp	.+86     	; 0x16c8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1672:	8b 81       	ldd	r24, Y+3	; 0x03
    1674:	81 30       	cpi	r24, 0x01	; 1
    1676:	a1 f4       	brne	.+40     	; 0x16a0 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1678:	a2 e3       	ldi	r26, 0x32	; 50
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	e2 e3       	ldi	r30, 0x32	; 50
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	48 2f       	mov	r20, r24
    1684:	8a 81       	ldd	r24, Y+2	; 0x02
    1686:	28 2f       	mov	r18, r24
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	02 2e       	mov	r0, r18
    1690:	02 c0       	rjmp	.+4      	; 0x1696 <GPIO_writePin+0x194>
    1692:	88 0f       	add	r24, r24
    1694:	99 1f       	adc	r25, r25
    1696:	0a 94       	dec	r0
    1698:	e2 f7       	brpl	.-8      	; 0x1692 <GPIO_writePin+0x190>
    169a:	84 2b       	or	r24, r20
    169c:	8c 93       	st	X, r24
    169e:	14 c0       	rjmp	.+40     	; 0x16c8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    16a0:	a2 e3       	ldi	r26, 0x32	; 50
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	e2 e3       	ldi	r30, 0x32	; 50
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	48 2f       	mov	r20, r24
    16ac:	8a 81       	ldd	r24, Y+2	; 0x02
    16ae:	28 2f       	mov	r18, r24
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	02 2e       	mov	r0, r18
    16b8:	02 c0       	rjmp	.+4      	; 0x16be <GPIO_writePin+0x1bc>
    16ba:	88 0f       	add	r24, r24
    16bc:	99 1f       	adc	r25, r25
    16be:	0a 94       	dec	r0
    16c0:	e2 f7       	brpl	.-8      	; 0x16ba <GPIO_writePin+0x1b8>
    16c2:	80 95       	com	r24
    16c4:	84 23       	and	r24, r20
    16c6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    16c8:	0f 90       	pop	r0
    16ca:	0f 90       	pop	r0
    16cc:	0f 90       	pop	r0
    16ce:	0f 90       	pop	r0
    16d0:	0f 90       	pop	r0
    16d2:	cf 91       	pop	r28
    16d4:	df 91       	pop	r29
    16d6:	08 95       	ret

000016d8 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    16d8:	df 93       	push	r29
    16da:	cf 93       	push	r28
    16dc:	00 d0       	rcall	.+0      	; 0x16de <GPIO_readPin+0x6>
    16de:	00 d0       	rcall	.+0      	; 0x16e0 <GPIO_readPin+0x8>
    16e0:	0f 92       	push	r0
    16e2:	cd b7       	in	r28, 0x3d	; 61
    16e4:	de b7       	in	r29, 0x3e	; 62
    16e6:	8a 83       	std	Y+2, r24	; 0x02
    16e8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    16ea:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16ec:	8b 81       	ldd	r24, Y+3	; 0x03
    16ee:	88 30       	cpi	r24, 0x08	; 8
    16f0:	08 f0       	brcs	.+2      	; 0x16f4 <GPIO_readPin+0x1c>
    16f2:	84 c0       	rjmp	.+264    	; 0x17fc <GPIO_readPin+0x124>
    16f4:	8a 81       	ldd	r24, Y+2	; 0x02
    16f6:	84 30       	cpi	r24, 0x04	; 4
    16f8:	08 f0       	brcs	.+2      	; 0x16fc <GPIO_readPin+0x24>
    16fa:	80 c0       	rjmp	.+256    	; 0x17fc <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    16fc:	8a 81       	ldd	r24, Y+2	; 0x02
    16fe:	28 2f       	mov	r18, r24
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	3d 83       	std	Y+5, r19	; 0x05
    1704:	2c 83       	std	Y+4, r18	; 0x04
    1706:	4c 81       	ldd	r20, Y+4	; 0x04
    1708:	5d 81       	ldd	r21, Y+5	; 0x05
    170a:	41 30       	cpi	r20, 0x01	; 1
    170c:	51 05       	cpc	r21, r1
    170e:	79 f1       	breq	.+94     	; 0x176e <GPIO_readPin+0x96>
    1710:	8c 81       	ldd	r24, Y+4	; 0x04
    1712:	9d 81       	ldd	r25, Y+5	; 0x05
    1714:	82 30       	cpi	r24, 0x02	; 2
    1716:	91 05       	cpc	r25, r1
    1718:	34 f4       	brge	.+12     	; 0x1726 <GPIO_readPin+0x4e>
    171a:	2c 81       	ldd	r18, Y+4	; 0x04
    171c:	3d 81       	ldd	r19, Y+5	; 0x05
    171e:	21 15       	cp	r18, r1
    1720:	31 05       	cpc	r19, r1
    1722:	69 f0       	breq	.+26     	; 0x173e <GPIO_readPin+0x66>
    1724:	6b c0       	rjmp	.+214    	; 0x17fc <GPIO_readPin+0x124>
    1726:	4c 81       	ldd	r20, Y+4	; 0x04
    1728:	5d 81       	ldd	r21, Y+5	; 0x05
    172a:	42 30       	cpi	r20, 0x02	; 2
    172c:	51 05       	cpc	r21, r1
    172e:	b9 f1       	breq	.+110    	; 0x179e <GPIO_readPin+0xc6>
    1730:	8c 81       	ldd	r24, Y+4	; 0x04
    1732:	9d 81       	ldd	r25, Y+5	; 0x05
    1734:	83 30       	cpi	r24, 0x03	; 3
    1736:	91 05       	cpc	r25, r1
    1738:	09 f4       	brne	.+2      	; 0x173c <GPIO_readPin+0x64>
    173a:	49 c0       	rjmp	.+146    	; 0x17ce <GPIO_readPin+0xf6>
    173c:	5f c0       	rjmp	.+190    	; 0x17fc <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    173e:	e9 e3       	ldi	r30, 0x39	; 57
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	28 2f       	mov	r18, r24
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	8b 81       	ldd	r24, Y+3	; 0x03
    174a:	88 2f       	mov	r24, r24
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	a9 01       	movw	r20, r18
    1750:	02 c0       	rjmp	.+4      	; 0x1756 <GPIO_readPin+0x7e>
    1752:	55 95       	asr	r21
    1754:	47 95       	ror	r20
    1756:	8a 95       	dec	r24
    1758:	e2 f7       	brpl	.-8      	; 0x1752 <GPIO_readPin+0x7a>
    175a:	ca 01       	movw	r24, r20
    175c:	81 70       	andi	r24, 0x01	; 1
    175e:	90 70       	andi	r25, 0x00	; 0
    1760:	88 23       	and	r24, r24
    1762:	19 f0       	breq	.+6      	; 0x176a <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	89 83       	std	Y+1, r24	; 0x01
    1768:	49 c0       	rjmp	.+146    	; 0x17fc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    176a:	19 82       	std	Y+1, r1	; 0x01
    176c:	47 c0       	rjmp	.+142    	; 0x17fc <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    176e:	e6 e3       	ldi	r30, 0x36	; 54
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	80 81       	ld	r24, Z
    1774:	28 2f       	mov	r18, r24
    1776:	30 e0       	ldi	r19, 0x00	; 0
    1778:	8b 81       	ldd	r24, Y+3	; 0x03
    177a:	88 2f       	mov	r24, r24
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	a9 01       	movw	r20, r18
    1780:	02 c0       	rjmp	.+4      	; 0x1786 <GPIO_readPin+0xae>
    1782:	55 95       	asr	r21
    1784:	47 95       	ror	r20
    1786:	8a 95       	dec	r24
    1788:	e2 f7       	brpl	.-8      	; 0x1782 <GPIO_readPin+0xaa>
    178a:	ca 01       	movw	r24, r20
    178c:	81 70       	andi	r24, 0x01	; 1
    178e:	90 70       	andi	r25, 0x00	; 0
    1790:	88 23       	and	r24, r24
    1792:	19 f0       	breq	.+6      	; 0x179a <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	89 83       	std	Y+1, r24	; 0x01
    1798:	31 c0       	rjmp	.+98     	; 0x17fc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    179a:	19 82       	std	Y+1, r1	; 0x01
    179c:	2f c0       	rjmp	.+94     	; 0x17fc <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    179e:	e3 e3       	ldi	r30, 0x33	; 51
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	28 2f       	mov	r18, r24
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	8b 81       	ldd	r24, Y+3	; 0x03
    17aa:	88 2f       	mov	r24, r24
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	a9 01       	movw	r20, r18
    17b0:	02 c0       	rjmp	.+4      	; 0x17b6 <GPIO_readPin+0xde>
    17b2:	55 95       	asr	r21
    17b4:	47 95       	ror	r20
    17b6:	8a 95       	dec	r24
    17b8:	e2 f7       	brpl	.-8      	; 0x17b2 <GPIO_readPin+0xda>
    17ba:	ca 01       	movw	r24, r20
    17bc:	81 70       	andi	r24, 0x01	; 1
    17be:	90 70       	andi	r25, 0x00	; 0
    17c0:	88 23       	and	r24, r24
    17c2:	19 f0       	breq	.+6      	; 0x17ca <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	89 83       	std	Y+1, r24	; 0x01
    17c8:	19 c0       	rjmp	.+50     	; 0x17fc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17ca:	19 82       	std	Y+1, r1	; 0x01
    17cc:	17 c0       	rjmp	.+46     	; 0x17fc <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    17ce:	e0 e3       	ldi	r30, 0x30	; 48
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	28 2f       	mov	r18, r24
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	8b 81       	ldd	r24, Y+3	; 0x03
    17da:	88 2f       	mov	r24, r24
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	a9 01       	movw	r20, r18
    17e0:	02 c0       	rjmp	.+4      	; 0x17e6 <GPIO_readPin+0x10e>
    17e2:	55 95       	asr	r21
    17e4:	47 95       	ror	r20
    17e6:	8a 95       	dec	r24
    17e8:	e2 f7       	brpl	.-8      	; 0x17e2 <GPIO_readPin+0x10a>
    17ea:	ca 01       	movw	r24, r20
    17ec:	81 70       	andi	r24, 0x01	; 1
    17ee:	90 70       	andi	r25, 0x00	; 0
    17f0:	88 23       	and	r24, r24
    17f2:	19 f0       	breq	.+6      	; 0x17fa <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	89 83       	std	Y+1, r24	; 0x01
    17f8:	01 c0       	rjmp	.+2      	; 0x17fc <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17fa:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    17fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    17fe:	0f 90       	pop	r0
    1800:	0f 90       	pop	r0
    1802:	0f 90       	pop	r0
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	cf 91       	pop	r28
    180a:	df 91       	pop	r29
    180c:	08 95       	ret

0000180e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    180e:	df 93       	push	r29
    1810:	cf 93       	push	r28
    1812:	00 d0       	rcall	.+0      	; 0x1814 <GPIO_setupPortDirection+0x6>
    1814:	00 d0       	rcall	.+0      	; 0x1816 <GPIO_setupPortDirection+0x8>
    1816:	cd b7       	in	r28, 0x3d	; 61
    1818:	de b7       	in	r29, 0x3e	; 62
    181a:	89 83       	std	Y+1, r24	; 0x01
    181c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    181e:	89 81       	ldd	r24, Y+1	; 0x01
    1820:	84 30       	cpi	r24, 0x04	; 4
    1822:	90 f5       	brcc	.+100    	; 0x1888 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1824:	89 81       	ldd	r24, Y+1	; 0x01
    1826:	28 2f       	mov	r18, r24
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	3c 83       	std	Y+4, r19	; 0x04
    182c:	2b 83       	std	Y+3, r18	; 0x03
    182e:	8b 81       	ldd	r24, Y+3	; 0x03
    1830:	9c 81       	ldd	r25, Y+4	; 0x04
    1832:	81 30       	cpi	r24, 0x01	; 1
    1834:	91 05       	cpc	r25, r1
    1836:	d1 f0       	breq	.+52     	; 0x186c <GPIO_setupPortDirection+0x5e>
    1838:	2b 81       	ldd	r18, Y+3	; 0x03
    183a:	3c 81       	ldd	r19, Y+4	; 0x04
    183c:	22 30       	cpi	r18, 0x02	; 2
    183e:	31 05       	cpc	r19, r1
    1840:	2c f4       	brge	.+10     	; 0x184c <GPIO_setupPortDirection+0x3e>
    1842:	8b 81       	ldd	r24, Y+3	; 0x03
    1844:	9c 81       	ldd	r25, Y+4	; 0x04
    1846:	00 97       	sbiw	r24, 0x00	; 0
    1848:	61 f0       	breq	.+24     	; 0x1862 <GPIO_setupPortDirection+0x54>
    184a:	1e c0       	rjmp	.+60     	; 0x1888 <GPIO_setupPortDirection+0x7a>
    184c:	2b 81       	ldd	r18, Y+3	; 0x03
    184e:	3c 81       	ldd	r19, Y+4	; 0x04
    1850:	22 30       	cpi	r18, 0x02	; 2
    1852:	31 05       	cpc	r19, r1
    1854:	81 f0       	breq	.+32     	; 0x1876 <GPIO_setupPortDirection+0x68>
    1856:	8b 81       	ldd	r24, Y+3	; 0x03
    1858:	9c 81       	ldd	r25, Y+4	; 0x04
    185a:	83 30       	cpi	r24, 0x03	; 3
    185c:	91 05       	cpc	r25, r1
    185e:	81 f0       	breq	.+32     	; 0x1880 <GPIO_setupPortDirection+0x72>
    1860:	13 c0       	rjmp	.+38     	; 0x1888 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1862:	ea e3       	ldi	r30, 0x3A	; 58
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	8a 81       	ldd	r24, Y+2	; 0x02
    1868:	80 83       	st	Z, r24
    186a:	0e c0       	rjmp	.+28     	; 0x1888 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    186c:	e7 e3       	ldi	r30, 0x37	; 55
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	8a 81       	ldd	r24, Y+2	; 0x02
    1872:	80 83       	st	Z, r24
    1874:	09 c0       	rjmp	.+18     	; 0x1888 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1876:	e4 e3       	ldi	r30, 0x34	; 52
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	8a 81       	ldd	r24, Y+2	; 0x02
    187c:	80 83       	st	Z, r24
    187e:	04 c0       	rjmp	.+8      	; 0x1888 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1880:	e1 e3       	ldi	r30, 0x31	; 49
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	8a 81       	ldd	r24, Y+2	; 0x02
    1886:	80 83       	st	Z, r24
			break;
		}
	}
}
    1888:	0f 90       	pop	r0
    188a:	0f 90       	pop	r0
    188c:	0f 90       	pop	r0
    188e:	0f 90       	pop	r0
    1890:	cf 91       	pop	r28
    1892:	df 91       	pop	r29
    1894:	08 95       	ret

00001896 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1896:	df 93       	push	r29
    1898:	cf 93       	push	r28
    189a:	00 d0       	rcall	.+0      	; 0x189c <GPIO_writePort+0x6>
    189c:	00 d0       	rcall	.+0      	; 0x189e <GPIO_writePort+0x8>
    189e:	cd b7       	in	r28, 0x3d	; 61
    18a0:	de b7       	in	r29, 0x3e	; 62
    18a2:	89 83       	std	Y+1, r24	; 0x01
    18a4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    18a6:	89 81       	ldd	r24, Y+1	; 0x01
    18a8:	84 30       	cpi	r24, 0x04	; 4
    18aa:	90 f5       	brcc	.+100    	; 0x1910 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    18ac:	89 81       	ldd	r24, Y+1	; 0x01
    18ae:	28 2f       	mov	r18, r24
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	3c 83       	std	Y+4, r19	; 0x04
    18b4:	2b 83       	std	Y+3, r18	; 0x03
    18b6:	8b 81       	ldd	r24, Y+3	; 0x03
    18b8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ba:	81 30       	cpi	r24, 0x01	; 1
    18bc:	91 05       	cpc	r25, r1
    18be:	d1 f0       	breq	.+52     	; 0x18f4 <GPIO_writePort+0x5e>
    18c0:	2b 81       	ldd	r18, Y+3	; 0x03
    18c2:	3c 81       	ldd	r19, Y+4	; 0x04
    18c4:	22 30       	cpi	r18, 0x02	; 2
    18c6:	31 05       	cpc	r19, r1
    18c8:	2c f4       	brge	.+10     	; 0x18d4 <GPIO_writePort+0x3e>
    18ca:	8b 81       	ldd	r24, Y+3	; 0x03
    18cc:	9c 81       	ldd	r25, Y+4	; 0x04
    18ce:	00 97       	sbiw	r24, 0x00	; 0
    18d0:	61 f0       	breq	.+24     	; 0x18ea <GPIO_writePort+0x54>
    18d2:	1e c0       	rjmp	.+60     	; 0x1910 <GPIO_writePort+0x7a>
    18d4:	2b 81       	ldd	r18, Y+3	; 0x03
    18d6:	3c 81       	ldd	r19, Y+4	; 0x04
    18d8:	22 30       	cpi	r18, 0x02	; 2
    18da:	31 05       	cpc	r19, r1
    18dc:	81 f0       	breq	.+32     	; 0x18fe <GPIO_writePort+0x68>
    18de:	8b 81       	ldd	r24, Y+3	; 0x03
    18e0:	9c 81       	ldd	r25, Y+4	; 0x04
    18e2:	83 30       	cpi	r24, 0x03	; 3
    18e4:	91 05       	cpc	r25, r1
    18e6:	81 f0       	breq	.+32     	; 0x1908 <GPIO_writePort+0x72>
    18e8:	13 c0       	rjmp	.+38     	; 0x1910 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    18ea:	eb e3       	ldi	r30, 0x3B	; 59
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	8a 81       	ldd	r24, Y+2	; 0x02
    18f0:	80 83       	st	Z, r24
    18f2:	0e c0       	rjmp	.+28     	; 0x1910 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    18f4:	e8 e3       	ldi	r30, 0x38	; 56
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	8a 81       	ldd	r24, Y+2	; 0x02
    18fa:	80 83       	st	Z, r24
    18fc:	09 c0       	rjmp	.+18     	; 0x1910 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    18fe:	e5 e3       	ldi	r30, 0x35	; 53
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	8a 81       	ldd	r24, Y+2	; 0x02
    1904:	80 83       	st	Z, r24
    1906:	04 c0       	rjmp	.+8      	; 0x1910 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1908:	e2 e3       	ldi	r30, 0x32	; 50
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	8a 81       	ldd	r24, Y+2	; 0x02
    190e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1910:	0f 90       	pop	r0
    1912:	0f 90       	pop	r0
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
    1918:	cf 91       	pop	r28
    191a:	df 91       	pop	r29
    191c:	08 95       	ret

0000191e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    191e:	df 93       	push	r29
    1920:	cf 93       	push	r28
    1922:	00 d0       	rcall	.+0      	; 0x1924 <GPIO_readPort+0x6>
    1924:	00 d0       	rcall	.+0      	; 0x1926 <GPIO_readPort+0x8>
    1926:	cd b7       	in	r28, 0x3d	; 61
    1928:	de b7       	in	r29, 0x3e	; 62
    192a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    192c:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    192e:	8a 81       	ldd	r24, Y+2	; 0x02
    1930:	84 30       	cpi	r24, 0x04	; 4
    1932:	90 f5       	brcc	.+100    	; 0x1998 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1934:	8a 81       	ldd	r24, Y+2	; 0x02
    1936:	28 2f       	mov	r18, r24
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	3c 83       	std	Y+4, r19	; 0x04
    193c:	2b 83       	std	Y+3, r18	; 0x03
    193e:	8b 81       	ldd	r24, Y+3	; 0x03
    1940:	9c 81       	ldd	r25, Y+4	; 0x04
    1942:	81 30       	cpi	r24, 0x01	; 1
    1944:	91 05       	cpc	r25, r1
    1946:	d1 f0       	breq	.+52     	; 0x197c <GPIO_readPort+0x5e>
    1948:	2b 81       	ldd	r18, Y+3	; 0x03
    194a:	3c 81       	ldd	r19, Y+4	; 0x04
    194c:	22 30       	cpi	r18, 0x02	; 2
    194e:	31 05       	cpc	r19, r1
    1950:	2c f4       	brge	.+10     	; 0x195c <GPIO_readPort+0x3e>
    1952:	8b 81       	ldd	r24, Y+3	; 0x03
    1954:	9c 81       	ldd	r25, Y+4	; 0x04
    1956:	00 97       	sbiw	r24, 0x00	; 0
    1958:	61 f0       	breq	.+24     	; 0x1972 <GPIO_readPort+0x54>
    195a:	1e c0       	rjmp	.+60     	; 0x1998 <GPIO_readPort+0x7a>
    195c:	2b 81       	ldd	r18, Y+3	; 0x03
    195e:	3c 81       	ldd	r19, Y+4	; 0x04
    1960:	22 30       	cpi	r18, 0x02	; 2
    1962:	31 05       	cpc	r19, r1
    1964:	81 f0       	breq	.+32     	; 0x1986 <GPIO_readPort+0x68>
    1966:	8b 81       	ldd	r24, Y+3	; 0x03
    1968:	9c 81       	ldd	r25, Y+4	; 0x04
    196a:	83 30       	cpi	r24, 0x03	; 3
    196c:	91 05       	cpc	r25, r1
    196e:	81 f0       	breq	.+32     	; 0x1990 <GPIO_readPort+0x72>
    1970:	13 c0       	rjmp	.+38     	; 0x1998 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1972:	e9 e3       	ldi	r30, 0x39	; 57
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	89 83       	std	Y+1, r24	; 0x01
    197a:	0e c0       	rjmp	.+28     	; 0x1998 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    197c:	e6 e3       	ldi	r30, 0x36	; 54
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	89 83       	std	Y+1, r24	; 0x01
    1984:	09 c0       	rjmp	.+18     	; 0x1998 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1986:	e3 e3       	ldi	r30, 0x33	; 51
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	89 83       	std	Y+1, r24	; 0x01
    198e:	04 c0       	rjmp	.+8      	; 0x1998 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1990:	e0 e3       	ldi	r30, 0x30	; 48
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1998:	89 81       	ldd	r24, Y+1	; 0x01
}
    199a:	0f 90       	pop	r0
    199c:	0f 90       	pop	r0
    199e:	0f 90       	pop	r0
    19a0:	0f 90       	pop	r0
    19a2:	cf 91       	pop	r28
    19a4:	df 91       	pop	r29
    19a6:	08 95       	ret

000019a8 <__vector_7>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
/*FOR COMPARE MODE*/
ISR(TIMER1_COMPA_vect)
{
    19a8:	1f 92       	push	r1
    19aa:	0f 92       	push	r0
    19ac:	0f b6       	in	r0, 0x3f	; 63
    19ae:	0f 92       	push	r0
    19b0:	11 24       	eor	r1, r1
    19b2:	2f 93       	push	r18
    19b4:	3f 93       	push	r19
    19b6:	4f 93       	push	r20
    19b8:	5f 93       	push	r21
    19ba:	6f 93       	push	r22
    19bc:	7f 93       	push	r23
    19be:	8f 93       	push	r24
    19c0:	9f 93       	push	r25
    19c2:	af 93       	push	r26
    19c4:	bf 93       	push	r27
    19c6:	ef 93       	push	r30
    19c8:	ff 93       	push	r31
    19ca:	df 93       	push	r29
    19cc:	cf 93       	push	r28
    19ce:	cd b7       	in	r28, 0x3d	; 61
    19d0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    19d2:	80 91 74 00 	lds	r24, 0x0074
    19d6:	90 91 75 00 	lds	r25, 0x0075
    19da:	00 97       	sbiw	r24, 0x00	; 0
    19dc:	29 f0       	breq	.+10     	; 0x19e8 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)();
    19de:	e0 91 74 00 	lds	r30, 0x0074
    19e2:	f0 91 75 00 	lds	r31, 0x0075
    19e6:	09 95       	icall
	}
}
    19e8:	cf 91       	pop	r28
    19ea:	df 91       	pop	r29
    19ec:	ff 91       	pop	r31
    19ee:	ef 91       	pop	r30
    19f0:	bf 91       	pop	r27
    19f2:	af 91       	pop	r26
    19f4:	9f 91       	pop	r25
    19f6:	8f 91       	pop	r24
    19f8:	7f 91       	pop	r23
    19fa:	6f 91       	pop	r22
    19fc:	5f 91       	pop	r21
    19fe:	4f 91       	pop	r20
    1a00:	3f 91       	pop	r19
    1a02:	2f 91       	pop	r18
    1a04:	0f 90       	pop	r0
    1a06:	0f be       	out	0x3f, r0	; 63
    1a08:	0f 90       	pop	r0
    1a0a:	1f 90       	pop	r1
    1a0c:	18 95       	reti

00001a0e <__vector_9>:


/*FOR OVERFLOW MODE*/
ISR(TIMER1_OVF_vect)
{
    1a0e:	1f 92       	push	r1
    1a10:	0f 92       	push	r0
    1a12:	0f b6       	in	r0, 0x3f	; 63
    1a14:	0f 92       	push	r0
    1a16:	11 24       	eor	r1, r1
    1a18:	2f 93       	push	r18
    1a1a:	3f 93       	push	r19
    1a1c:	4f 93       	push	r20
    1a1e:	5f 93       	push	r21
    1a20:	6f 93       	push	r22
    1a22:	7f 93       	push	r23
    1a24:	8f 93       	push	r24
    1a26:	9f 93       	push	r25
    1a28:	af 93       	push	r26
    1a2a:	bf 93       	push	r27
    1a2c:	ef 93       	push	r30
    1a2e:	ff 93       	push	r31
    1a30:	df 93       	push	r29
    1a32:	cf 93       	push	r28
    1a34:	cd b7       	in	r28, 0x3d	; 61
    1a36:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1a38:	80 91 74 00 	lds	r24, 0x0074
    1a3c:	90 91 75 00 	lds	r25, 0x0075
    1a40:	00 97       	sbiw	r24, 0x00	; 0
    1a42:	29 f0       	breq	.+10     	; 0x1a4e <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)();
    1a44:	e0 91 74 00 	lds	r30, 0x0074
    1a48:	f0 91 75 00 	lds	r31, 0x0075
    1a4c:	09 95       	icall
	}
}
    1a4e:	cf 91       	pop	r28
    1a50:	df 91       	pop	r29
    1a52:	ff 91       	pop	r31
    1a54:	ef 91       	pop	r30
    1a56:	bf 91       	pop	r27
    1a58:	af 91       	pop	r26
    1a5a:	9f 91       	pop	r25
    1a5c:	8f 91       	pop	r24
    1a5e:	7f 91       	pop	r23
    1a60:	6f 91       	pop	r22
    1a62:	5f 91       	pop	r21
    1a64:	4f 91       	pop	r20
    1a66:	3f 91       	pop	r19
    1a68:	2f 91       	pop	r18
    1a6a:	0f 90       	pop	r0
    1a6c:	0f be       	out	0x3f, r0	; 63
    1a6e:	0f 90       	pop	r0
    1a70:	1f 90       	pop	r1
    1a72:	18 95       	reti

00001a74 <Timer1_init>:




void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    1a74:	df 93       	push	r29
    1a76:	cf 93       	push	r28
    1a78:	00 d0       	rcall	.+0      	; 0x1a7a <Timer1_init+0x6>
    1a7a:	cd b7       	in	r28, 0x3d	; 61
    1a7c:	de b7       	in	r29, 0x3e	; 62
    1a7e:	9a 83       	std	Y+2, r25	; 0x02
    1a80:	89 83       	std	Y+1, r24	; 0x01

	TCNT1 = Config_Ptr->initial_value;
    1a82:	ac e4       	ldi	r26, 0x4C	; 76
    1a84:	b0 e0       	ldi	r27, 0x00	; 0
    1a86:	e9 81       	ldd	r30, Y+1	; 0x01
    1a88:	fa 81       	ldd	r31, Y+2	; 0x02
    1a8a:	80 81       	ld	r24, Z
    1a8c:	91 81       	ldd	r25, Z+1	; 0x01
    1a8e:	11 96       	adiw	r26, 0x01	; 1
    1a90:	9c 93       	st	X, r25
    1a92:	8e 93       	st	-X, r24
	OCR1A = Config_Ptr->compare_value;
    1a94:	aa e4       	ldi	r26, 0x4A	; 74
    1a96:	b0 e0       	ldi	r27, 0x00	; 0
    1a98:	e9 81       	ldd	r30, Y+1	; 0x01
    1a9a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a9c:	82 81       	ldd	r24, Z+2	; 0x02
    1a9e:	93 81       	ldd	r25, Z+3	; 0x03
    1aa0:	11 96       	adiw	r26, 0x01	; 1
    1aa2:	9c 93       	st	X, r25
    1aa4:	8e 93       	st	-X, r24
	TCCR1A |= (1<<FOC1A)|(1<<FOC1B); //for NON_PWM mode
    1aa6:	af e4       	ldi	r26, 0x4F	; 79
    1aa8:	b0 e0       	ldi	r27, 0x00	; 0
    1aaa:	ef e4       	ldi	r30, 0x4F	; 79
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	80 81       	ld	r24, Z
    1ab0:	8c 60       	ori	r24, 0x0C	; 12
    1ab2:	8c 93       	st	X, r24
	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0XF8) |(Config_Ptr->prescaler);
    1ab4:	ae e4       	ldi	r26, 0x4E	; 78
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	ee e4       	ldi	r30, 0x4E	; 78
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	98 2f       	mov	r25, r24
    1ac0:	98 7f       	andi	r25, 0xF8	; 248
    1ac2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ac4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ac6:	84 81       	ldd	r24, Z+4	; 0x04
    1ac8:	89 2b       	or	r24, r25
    1aca:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B& 0XF7)|(Config_Ptr->mode<<WGM12);
    1acc:	ae e4       	ldi	r26, 0x4E	; 78
    1ace:	b0 e0       	ldi	r27, 0x00	; 0
    1ad0:	ee e4       	ldi	r30, 0x4E	; 78
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	28 2f       	mov	r18, r24
    1ad8:	27 7f       	andi	r18, 0xF7	; 247
    1ada:	e9 81       	ldd	r30, Y+1	; 0x01
    1adc:	fa 81       	ldd	r31, Y+2	; 0x02
    1ade:	85 81       	ldd	r24, Z+5	; 0x05
    1ae0:	88 2f       	mov	r24, r24
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	88 0f       	add	r24, r24
    1ae6:	99 1f       	adc	r25, r25
    1ae8:	88 0f       	add	r24, r24
    1aea:	99 1f       	adc	r25, r25
    1aec:	88 0f       	add	r24, r24
    1aee:	99 1f       	adc	r25, r25
    1af0:	82 2b       	or	r24, r18
    1af2:	8c 93       	st	X, r24
	TIMSK |= (1<<OCIE1A) | (1<< TOIE1); ////OCIE1A interrupt enable for a compare Maching.TOIE  OVERFLOW interrupt enable
    1af4:	a9 e5       	ldi	r26, 0x59	; 89
    1af6:	b0 e0       	ldi	r27, 0x00	; 0
    1af8:	e9 e5       	ldi	r30, 0x59	; 89
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	84 61       	ori	r24, 0x14	; 20
    1b00:	8c 93       	st	X, r24
	sei(); //SET I-BIT
    1b02:	78 94       	sei
}
    1b04:	0f 90       	pop	r0
    1b06:	0f 90       	pop	r0
    1b08:	cf 91       	pop	r28
    1b0a:	df 91       	pop	r29
    1b0c:	08 95       	ret

00001b0e <Timer1_deInit>:

void Timer1_deInit(void)
{
    1b0e:	df 93       	push	r29
    1b10:	cf 93       	push	r28
    1b12:	cd b7       	in	r28, 0x3d	; 61
    1b14:	de b7       	in	r29, 0x3e	; 62

	TCNT1 = 0;
    1b16:	ec e4       	ldi	r30, 0x4C	; 76
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	11 82       	std	Z+1, r1	; 0x01
    1b1c:	10 82       	st	Z, r1
	OCR1A = 0;
    1b1e:	ea e4       	ldi	r30, 0x4A	; 74
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	11 82       	std	Z+1, r1	; 0x01
    1b24:	10 82       	st	Z, r1
	TCCR1A =0;
    1b26:	ef e4       	ldi	r30, 0x4F	; 79
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	10 82       	st	Z, r1
	TCCR1B=0;
    1b2c:	ee e4       	ldi	r30, 0x4E	; 78
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	10 82       	st	Z, r1
	TIMSK =0;
    1b32:	e9 e5       	ldi	r30, 0x59	; 89
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	10 82       	st	Z, r1
	cli(); //Clear I-BIT
    1b38:	f8 94       	cli


}
    1b3a:	cf 91       	pop	r28
    1b3c:	df 91       	pop	r29
    1b3e:	08 95       	ret

00001b40 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
    1b40:	df 93       	push	r29
    1b42:	cf 93       	push	r28
    1b44:	00 d0       	rcall	.+0      	; 0x1b46 <Timer1_setCallBack+0x6>
    1b46:	cd b7       	in	r28, 0x3d	; 61
    1b48:	de b7       	in	r29, 0x3e	; 62
    1b4a:	9a 83       	std	Y+2, r25	; 0x02
    1b4c:	89 83       	std	Y+1, r24	; 0x01

	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	9a 81       	ldd	r25, Y+2	; 0x02
    1b52:	90 93 75 00 	sts	0x0075, r25
    1b56:	80 93 74 00 	sts	0x0074, r24

}
    1b5a:	0f 90       	pop	r0
    1b5c:	0f 90       	pop	r0
    1b5e:	cf 91       	pop	r28
    1b60:	df 91       	pop	r29
    1b62:	08 95       	ret

00001b64 <LED_init>:
#include<avr/io.h>



Error_state  LED_init(uint8 port_num, uint8 pin_num)
{
    1b64:	df 93       	push	r29
    1b66:	cf 93       	push	r28
    1b68:	00 d0       	rcall	.+0      	; 0x1b6a <LED_init+0x6>
    1b6a:	00 d0       	rcall	.+0      	; 0x1b6c <LED_init+0x8>
    1b6c:	cd b7       	in	r28, 0x3d	; 61
    1b6e:	de b7       	in	r29, 0x3e	; 62
    1b70:	8b 83       	std	Y+3, r24	; 0x03
    1b72:	6c 83       	std	Y+4, r22	; 0x04
	Error_state led_state=valid;
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	8a 83       	std	Y+2, r24	; 0x02

	if(port_num>3||pin_num>7)
    1b78:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7a:	84 30       	cpi	r24, 0x04	; 4
    1b7c:	18 f4       	brcc	.+6      	; 0x1b84 <LED_init+0x20>
    1b7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b80:	88 30       	cpi	r24, 0x08	; 8
    1b82:	10 f0       	brcs	.+4      	; 0x1b88 <LED_init+0x24>
		{
		Error_state led_state=not_valid;
    1b84:	19 82       	std	Y+1, r1	; 0x01
    1b86:	05 c0       	rjmp	.+10     	; 0x1b92 <LED_init+0x2e>
		}
	else{GPIO_setupPinDirection(port_num,pin_num,PIN_OUTPUT);}
    1b88:	8b 81       	ldd	r24, Y+3	; 0x03
    1b8a:	6c 81       	ldd	r22, Y+4	; 0x04
    1b8c:	41 e0       	ldi	r20, 0x01	; 1
    1b8e:	0e 94 96 09 	call	0x132c	; 0x132c <GPIO_setupPinDirection>

	return led_state;
    1b92:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1b94:	0f 90       	pop	r0
    1b96:	0f 90       	pop	r0
    1b98:	0f 90       	pop	r0
    1b9a:	0f 90       	pop	r0
    1b9c:	cf 91       	pop	r28
    1b9e:	df 91       	pop	r29
    1ba0:	08 95       	ret

00001ba2 <LED_on>:




Error_state LED_on(uint8 port_num, uint8 pin_num)
{
    1ba2:	df 93       	push	r29
    1ba4:	cf 93       	push	r28
    1ba6:	00 d0       	rcall	.+0      	; 0x1ba8 <LED_on+0x6>
    1ba8:	00 d0       	rcall	.+0      	; 0x1baa <LED_on+0x8>
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62
    1bae:	8b 83       	std	Y+3, r24	; 0x03
    1bb0:	6c 83       	std	Y+4, r22	; 0x04
	Error_state led_state=valid;
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	8a 83       	std	Y+2, r24	; 0x02

	if(port_num>3||pin_num>7)
    1bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb8:	84 30       	cpi	r24, 0x04	; 4
    1bba:	18 f4       	brcc	.+6      	; 0x1bc2 <LED_on+0x20>
    1bbc:	8c 81       	ldd	r24, Y+4	; 0x04
    1bbe:	88 30       	cpi	r24, 0x08	; 8
    1bc0:	10 f0       	brcs	.+4      	; 0x1bc6 <LED_on+0x24>
		{
		Error_state led_state=not_valid;
    1bc2:	19 82       	std	Y+1, r1	; 0x01
    1bc4:	05 c0       	rjmp	.+10     	; 0x1bd0 <LED_on+0x2e>
		}
	else{
	GPIO_writePin(port_num, pin_num, LOGIC_HIGH);
    1bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc8:	6c 81       	ldd	r22, Y+4	; 0x04
    1bca:	41 e0       	ldi	r20, 0x01	; 1
    1bcc:	0e 94 81 0a 	call	0x1502	; 0x1502 <GPIO_writePin>
	}

	return led_state;
    1bd0:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1bd2:	0f 90       	pop	r0
    1bd4:	0f 90       	pop	r0
    1bd6:	0f 90       	pop	r0
    1bd8:	0f 90       	pop	r0
    1bda:	cf 91       	pop	r28
    1bdc:	df 91       	pop	r29
    1bde:	08 95       	ret

00001be0 <LED_off>:




Error_state LED_off(uint8 port_num, uint8 pin_num)
{
    1be0:	df 93       	push	r29
    1be2:	cf 93       	push	r28
    1be4:	00 d0       	rcall	.+0      	; 0x1be6 <LED_off+0x6>
    1be6:	00 d0       	rcall	.+0      	; 0x1be8 <LED_off+0x8>
    1be8:	cd b7       	in	r28, 0x3d	; 61
    1bea:	de b7       	in	r29, 0x3e	; 62
    1bec:	8b 83       	std	Y+3, r24	; 0x03
    1bee:	6c 83       	std	Y+4, r22	; 0x04
	Error_state led_state=valid;
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	8a 83       	std	Y+2, r24	; 0x02

	if(port_num>3||pin_num>7)
    1bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf6:	84 30       	cpi	r24, 0x04	; 4
    1bf8:	18 f4       	brcc	.+6      	; 0x1c00 <LED_off+0x20>
    1bfa:	8c 81       	ldd	r24, Y+4	; 0x04
    1bfc:	88 30       	cpi	r24, 0x08	; 8
    1bfe:	10 f0       	brcs	.+4      	; 0x1c04 <LED_off+0x24>
		{
		Error_state led_state=not_valid;
    1c00:	19 82       	std	Y+1, r1	; 0x01
    1c02:	05 c0       	rjmp	.+10     	; 0x1c0e <LED_off+0x2e>
		}
	else{
	GPIO_writePin(port_num, pin_num, LOGIC_LOW);
    1c04:	8b 81       	ldd	r24, Y+3	; 0x03
    1c06:	6c 81       	ldd	r22, Y+4	; 0x04
    1c08:	40 e0       	ldi	r20, 0x00	; 0
    1c0a:	0e 94 81 0a 	call	0x1502	; 0x1502 <GPIO_writePin>
}
	return led_state;
    1c0e:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1c10:	0f 90       	pop	r0
    1c12:	0f 90       	pop	r0
    1c14:	0f 90       	pop	r0
    1c16:	0f 90       	pop	r0
    1c18:	cf 91       	pop	r28
    1c1a:	df 91       	pop	r29
    1c1c:	08 95       	ret

00001c1e <LED_toggle>:


Error_state LED_toggle(uint8 port_num, uint8 pin_num)
{
    1c1e:	df 93       	push	r29
    1c20:	cf 93       	push	r28
    1c22:	cd b7       	in	r28, 0x3d	; 61
    1c24:	de b7       	in	r29, 0x3e	; 62
    1c26:	61 97       	sbiw	r28, 0x11	; 17
    1c28:	0f b6       	in	r0, 0x3f	; 63
    1c2a:	f8 94       	cli
    1c2c:	de bf       	out	0x3e, r29	; 62
    1c2e:	0f be       	out	0x3f, r0	; 63
    1c30:	cd bf       	out	0x3d, r28	; 61
    1c32:	88 8b       	std	Y+16, r24	; 0x10
    1c34:	69 8b       	std	Y+17, r22	; 0x11
	Error_state led_state=valid;
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	8f 87       	std	Y+15, r24	; 0x0f

	if(port_num==PORTA_ID)
    1c3a:	88 89       	ldd	r24, Y+16	; 0x10
    1c3c:	88 23       	and	r24, r24
    1c3e:	a1 f4       	brne	.+40     	; 0x1c68 <LED_toggle+0x4a>
	{
		TOGGLE_BIT(PORTA,pin_num);
    1c40:	ab e3       	ldi	r26, 0x3B	; 59
    1c42:	b0 e0       	ldi	r27, 0x00	; 0
    1c44:	eb e3       	ldi	r30, 0x3B	; 59
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	80 81       	ld	r24, Z
    1c4a:	48 2f       	mov	r20, r24
    1c4c:	89 89       	ldd	r24, Y+17	; 0x11
    1c4e:	28 2f       	mov	r18, r24
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	02 2e       	mov	r0, r18
    1c58:	02 c0       	rjmp	.+4      	; 0x1c5e <LED_toggle+0x40>
    1c5a:	88 0f       	add	r24, r24
    1c5c:	99 1f       	adc	r25, r25
    1c5e:	0a 94       	dec	r0
    1c60:	e2 f7       	brpl	.-8      	; 0x1c5a <LED_toggle+0x3c>
    1c62:	84 27       	eor	r24, r20
    1c64:	8c 93       	st	X, r24
    1c66:	43 c0       	rjmp	.+134    	; 0x1cee <LED_toggle+0xd0>
	}

	else if(port_num==PORTB_ID)
    1c68:	88 89       	ldd	r24, Y+16	; 0x10
    1c6a:	81 30       	cpi	r24, 0x01	; 1
    1c6c:	a1 f4       	brne	.+40     	; 0x1c96 <LED_toggle+0x78>
	{
		TOGGLE_BIT(PORTB,pin_num);
    1c6e:	a8 e3       	ldi	r26, 0x38	; 56
    1c70:	b0 e0       	ldi	r27, 0x00	; 0
    1c72:	e8 e3       	ldi	r30, 0x38	; 56
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	80 81       	ld	r24, Z
    1c78:	48 2f       	mov	r20, r24
    1c7a:	89 89       	ldd	r24, Y+17	; 0x11
    1c7c:	28 2f       	mov	r18, r24
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	02 2e       	mov	r0, r18
    1c86:	02 c0       	rjmp	.+4      	; 0x1c8c <LED_toggle+0x6e>
    1c88:	88 0f       	add	r24, r24
    1c8a:	99 1f       	adc	r25, r25
    1c8c:	0a 94       	dec	r0
    1c8e:	e2 f7       	brpl	.-8      	; 0x1c88 <LED_toggle+0x6a>
    1c90:	84 27       	eor	r24, r20
    1c92:	8c 93       	st	X, r24
    1c94:	2c c0       	rjmp	.+88     	; 0x1cee <LED_toggle+0xd0>
	}
else if(port_num==PORTC_ID)
    1c96:	88 89       	ldd	r24, Y+16	; 0x10
    1c98:	82 30       	cpi	r24, 0x02	; 2
    1c9a:	a1 f4       	brne	.+40     	; 0x1cc4 <LED_toggle+0xa6>
{
	TOGGLE_BIT(PORTC,pin_num);
    1c9c:	a5 e3       	ldi	r26, 0x35	; 53
    1c9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ca0:	e5 e3       	ldi	r30, 0x35	; 53
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 81       	ld	r24, Z
    1ca6:	48 2f       	mov	r20, r24
    1ca8:	89 89       	ldd	r24, Y+17	; 0x11
    1caa:	28 2f       	mov	r18, r24
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	02 2e       	mov	r0, r18
    1cb4:	02 c0       	rjmp	.+4      	; 0x1cba <LED_toggle+0x9c>
    1cb6:	88 0f       	add	r24, r24
    1cb8:	99 1f       	adc	r25, r25
    1cba:	0a 94       	dec	r0
    1cbc:	e2 f7       	brpl	.-8      	; 0x1cb6 <LED_toggle+0x98>
    1cbe:	84 27       	eor	r24, r20
    1cc0:	8c 93       	st	X, r24
    1cc2:	15 c0       	rjmp	.+42     	; 0x1cee <LED_toggle+0xd0>
}

	else if(port_num==PORTD_ID)
    1cc4:	88 89       	ldd	r24, Y+16	; 0x10
    1cc6:	83 30       	cpi	r24, 0x03	; 3
    1cc8:	91 f4       	brne	.+36     	; 0x1cee <LED_toggle+0xd0>
	{
		TOGGLE_BIT(PORTC,pin_num);
    1cca:	a5 e3       	ldi	r26, 0x35	; 53
    1ccc:	b0 e0       	ldi	r27, 0x00	; 0
    1cce:	e5 e3       	ldi	r30, 0x35	; 53
    1cd0:	f0 e0       	ldi	r31, 0x00	; 0
    1cd2:	80 81       	ld	r24, Z
    1cd4:	48 2f       	mov	r20, r24
    1cd6:	89 89       	ldd	r24, Y+17	; 0x11
    1cd8:	28 2f       	mov	r18, r24
    1cda:	30 e0       	ldi	r19, 0x00	; 0
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	02 c0       	rjmp	.+4      	; 0x1ce6 <LED_toggle+0xc8>
    1ce2:	88 0f       	add	r24, r24
    1ce4:	99 1f       	adc	r25, r25
    1ce6:	2a 95       	dec	r18
    1ce8:	e2 f7       	brpl	.-8      	; 0x1ce2 <LED_toggle+0xc4>
    1cea:	84 27       	eor	r24, r20
    1cec:	8c 93       	st	X, r24
    1cee:	80 e0       	ldi	r24, 0x00	; 0
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	aa e7       	ldi	r26, 0x7A	; 122
    1cf4:	b4 e4       	ldi	r27, 0x44	; 68
    1cf6:	8b 87       	std	Y+11, r24	; 0x0b
    1cf8:	9c 87       	std	Y+12, r25	; 0x0c
    1cfa:	ad 87       	std	Y+13, r26	; 0x0d
    1cfc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cfe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d00:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d02:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d04:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	4a e7       	ldi	r20, 0x7A	; 122
    1d0c:	53 e4       	ldi	r21, 0x43	; 67
    1d0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d12:	dc 01       	movw	r26, r24
    1d14:	cb 01       	movw	r24, r22
    1d16:	8f 83       	std	Y+7, r24	; 0x07
    1d18:	98 87       	std	Y+8, r25	; 0x08
    1d1a:	a9 87       	std	Y+9, r26	; 0x09
    1d1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d20:	78 85       	ldd	r23, Y+8	; 0x08
    1d22:	89 85       	ldd	r24, Y+9	; 0x09
    1d24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	40 e8       	ldi	r20, 0x80	; 128
    1d2c:	5f e3       	ldi	r21, 0x3F	; 63
    1d2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d32:	88 23       	and	r24, r24
    1d34:	2c f4       	brge	.+10     	; 0x1d40 <LED_toggle+0x122>
		__ticks = 1;
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	9e 83       	std	Y+6, r25	; 0x06
    1d3c:	8d 83       	std	Y+5, r24	; 0x05
    1d3e:	3f c0       	rjmp	.+126    	; 0x1dbe <LED_toggle+0x1a0>
	else if (__tmp > 65535)
    1d40:	6f 81       	ldd	r22, Y+7	; 0x07
    1d42:	78 85       	ldd	r23, Y+8	; 0x08
    1d44:	89 85       	ldd	r24, Y+9	; 0x09
    1d46:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	3f ef       	ldi	r19, 0xFF	; 255
    1d4c:	4f e7       	ldi	r20, 0x7F	; 127
    1d4e:	57 e4       	ldi	r21, 0x47	; 71
    1d50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d54:	18 16       	cp	r1, r24
    1d56:	4c f5       	brge	.+82     	; 0x1daa <LED_toggle+0x18c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d58:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	40 e2       	ldi	r20, 0x20	; 32
    1d66:	51 e4       	ldi	r21, 0x41	; 65
    1d68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d6c:	dc 01       	movw	r26, r24
    1d6e:	cb 01       	movw	r24, r22
    1d70:	bc 01       	movw	r22, r24
    1d72:	cd 01       	movw	r24, r26
    1d74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d78:	dc 01       	movw	r26, r24
    1d7a:	cb 01       	movw	r24, r22
    1d7c:	9e 83       	std	Y+6, r25	; 0x06
    1d7e:	8d 83       	std	Y+5, r24	; 0x05
    1d80:	0f c0       	rjmp	.+30     	; 0x1da0 <LED_toggle+0x182>
    1d82:	89 e1       	ldi	r24, 0x19	; 25
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	9c 83       	std	Y+4, r25	; 0x04
    1d88:	8b 83       	std	Y+3, r24	; 0x03
    1d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8e:	01 97       	sbiw	r24, 0x01	; 1
    1d90:	f1 f7       	brne	.-4      	; 0x1d8e <LED_toggle+0x170>
    1d92:	9c 83       	std	Y+4, r25	; 0x04
    1d94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d96:	8d 81       	ldd	r24, Y+5	; 0x05
    1d98:	9e 81       	ldd	r25, Y+6	; 0x06
    1d9a:	01 97       	sbiw	r24, 0x01	; 1
    1d9c:	9e 83       	std	Y+6, r25	; 0x06
    1d9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1da0:	8d 81       	ldd	r24, Y+5	; 0x05
    1da2:	9e 81       	ldd	r25, Y+6	; 0x06
    1da4:	00 97       	sbiw	r24, 0x00	; 0
    1da6:	69 f7       	brne	.-38     	; 0x1d82 <LED_toggle+0x164>
    1da8:	14 c0       	rjmp	.+40     	; 0x1dd2 <LED_toggle+0x1b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1daa:	6f 81       	ldd	r22, Y+7	; 0x07
    1dac:	78 85       	ldd	r23, Y+8	; 0x08
    1dae:	89 85       	ldd	r24, Y+9	; 0x09
    1db0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db6:	dc 01       	movw	r26, r24
    1db8:	cb 01       	movw	r24, r22
    1dba:	9e 83       	std	Y+6, r25	; 0x06
    1dbc:	8d 83       	std	Y+5, r24	; 0x05
    1dbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc0:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc2:	9a 83       	std	Y+2, r25	; 0x02
    1dc4:	89 83       	std	Y+1, r24	; 0x01
    1dc6:	89 81       	ldd	r24, Y+1	; 0x01
    1dc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1dca:	01 97       	sbiw	r24, 0x01	; 1
    1dcc:	f1 f7       	brne	.-4      	; 0x1dca <LED_toggle+0x1ac>
    1dce:	9a 83       	std	Y+2, r25	; 0x02
    1dd0:	89 83       	std	Y+1, r24	; 0x01




	_delay_ms(1000);
	return led_state;
    1dd2:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    1dd4:	61 96       	adiw	r28, 0x11	; 17
    1dd6:	0f b6       	in	r0, 0x3f	; 63
    1dd8:	f8 94       	cli
    1dda:	de bf       	out	0x3e, r29	; 62
    1ddc:	0f be       	out	0x3f, r0	; 63
    1dde:	cd bf       	out	0x3d, r28	; 61
    1de0:	cf 91       	pop	r28
    1de2:	df 91       	pop	r29
    1de4:	08 95       	ret

00001de6 <BUTTON_init>:
#include <util/delay.h>
#include"../HAL/push_button.h"

void BUTTON_init(uint8 port_num, uint8 pin_num)
{
    1de6:	df 93       	push	r29
    1de8:	cf 93       	push	r28
    1dea:	00 d0       	rcall	.+0      	; 0x1dec <BUTTON_init+0x6>
    1dec:	cd b7       	in	r28, 0x3d	; 61
    1dee:	de b7       	in	r29, 0x3e	; 62
    1df0:	89 83       	std	Y+1, r24	; 0x01
    1df2:	6a 83       	std	Y+2, r22	; 0x02

	GPIO_setupPinDirection(port_num, pin_num, PIN_INPUT);
    1df4:	89 81       	ldd	r24, Y+1	; 0x01
    1df6:	6a 81       	ldd	r22, Y+2	; 0x02
    1df8:	40 e0       	ldi	r20, 0x00	; 0
    1dfa:	0e 94 96 09 	call	0x132c	; 0x132c <GPIO_setupPinDirection>

}
    1dfe:	0f 90       	pop	r0
    1e00:	0f 90       	pop	r0
    1e02:	cf 91       	pop	r28
    1e04:	df 91       	pop	r29
    1e06:	08 95       	ret

00001e08 <__prologue_saves__>:
    1e08:	2f 92       	push	r2
    1e0a:	3f 92       	push	r3
    1e0c:	4f 92       	push	r4
    1e0e:	5f 92       	push	r5
    1e10:	6f 92       	push	r6
    1e12:	7f 92       	push	r7
    1e14:	8f 92       	push	r8
    1e16:	9f 92       	push	r9
    1e18:	af 92       	push	r10
    1e1a:	bf 92       	push	r11
    1e1c:	cf 92       	push	r12
    1e1e:	df 92       	push	r13
    1e20:	ef 92       	push	r14
    1e22:	ff 92       	push	r15
    1e24:	0f 93       	push	r16
    1e26:	1f 93       	push	r17
    1e28:	cf 93       	push	r28
    1e2a:	df 93       	push	r29
    1e2c:	cd b7       	in	r28, 0x3d	; 61
    1e2e:	de b7       	in	r29, 0x3e	; 62
    1e30:	ca 1b       	sub	r28, r26
    1e32:	db 0b       	sbc	r29, r27
    1e34:	0f b6       	in	r0, 0x3f	; 63
    1e36:	f8 94       	cli
    1e38:	de bf       	out	0x3e, r29	; 62
    1e3a:	0f be       	out	0x3f, r0	; 63
    1e3c:	cd bf       	out	0x3d, r28	; 61
    1e3e:	09 94       	ijmp

00001e40 <__epilogue_restores__>:
    1e40:	2a 88       	ldd	r2, Y+18	; 0x12
    1e42:	39 88       	ldd	r3, Y+17	; 0x11
    1e44:	48 88       	ldd	r4, Y+16	; 0x10
    1e46:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e48:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e4a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e4c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e4e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e50:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e52:	b9 84       	ldd	r11, Y+9	; 0x09
    1e54:	c8 84       	ldd	r12, Y+8	; 0x08
    1e56:	df 80       	ldd	r13, Y+7	; 0x07
    1e58:	ee 80       	ldd	r14, Y+6	; 0x06
    1e5a:	fd 80       	ldd	r15, Y+5	; 0x05
    1e5c:	0c 81       	ldd	r16, Y+4	; 0x04
    1e5e:	1b 81       	ldd	r17, Y+3	; 0x03
    1e60:	aa 81       	ldd	r26, Y+2	; 0x02
    1e62:	b9 81       	ldd	r27, Y+1	; 0x01
    1e64:	ce 0f       	add	r28, r30
    1e66:	d1 1d       	adc	r29, r1
    1e68:	0f b6       	in	r0, 0x3f	; 63
    1e6a:	f8 94       	cli
    1e6c:	de bf       	out	0x3e, r29	; 62
    1e6e:	0f be       	out	0x3f, r0	; 63
    1e70:	cd bf       	out	0x3d, r28	; 61
    1e72:	ed 01       	movw	r28, r26
    1e74:	08 95       	ret

00001e76 <_exit>:
    1e76:	f8 94       	cli

00001e78 <__stop_program>:
    1e78:	ff cf       	rjmp	.-2      	; 0x1e78 <__stop_program>
